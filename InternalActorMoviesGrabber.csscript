//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";

using System;
using System.Text;
using System.IO;
using System.Net;
using System.Web;
using System.Text.RegularExpressions;
using MediaPortal.GUI.Library;
using MediaPortal.Util;
using MediaPortal.Video.Database;
using System.Collections;

internal class InternalActorsGrabber : IIMDBInternalActorsScriptGrabber
{
  const string strKinopoiskVersion = "20140721.01 by ajs";
  
  private string _strBody = string.Empty;

  #region ActorMoviesDetails

  public bool GetPlotImdb(ref IMDBMovie movie)
  {
    string strUrl = String.Format("http://m.imdb.com/title/{0}", movie.IMDBNumber);
    string regex = @"<p itemprop=""description"">(?<moviePlot>.+?)</p>";

    _strBody = string.Empty;
    string shortPlot = GetPlot(strUrl, regex, ref _strBody);

    string pageNotFound = @"<h1>Page not found</h1>";

    if (Regex.Match(_strBody, pageNotFound, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success)
    {
      Log.Warn("GUIVideoArtistInfo-Actor movielist update Page not found: {0}", strUrl);
      return false;
    }

    // Full plot
    strUrl = String.Format("http://m.imdb.com/title/{0}/plotsummary", movie.IMDBNumber);
    regex = @">Plot\sSummary.*?<p\sclass=""text-large"">(?<moviePlot>.*?)</p>";

    string plotBody = string.Empty;
    string fullPlot = GetPlot(strUrl, regex, ref plotBody);

    if (fullPlot != string.Empty)
    {
      shortPlot = fullPlot.Trim();
    }

    movie.PlotOutline = shortPlot;
    // Director, actors, rating....
    GetExtraDataImdb(ref movie);
    return true;
  }

  public string GetThumbImdb(string imdbId)
  {
    TMDBCoverSearch tmdbSearch = new TMDBCoverSearch();
    tmdbSearch.SearchCovers("", imdbId);

    if ((tmdbSearch.Count > 0) && (tmdbSearch[0] != string.Empty))
    {
      return tmdbSearch[0];
    }

    _strBody = string.Empty;
    string thumb = string.Empty;

    string uri;
    string strUrl = String.Format("http://m.imdb.com/title/{0}", imdbId);
    _strBody = GetPage(strUrl, "utf-8", out uri);
    string regex = @"Poster"".src=""(?<poster>.*?_V1)";
    thumb = Regex.Match(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["poster"].Value;

    if (!string.IsNullOrEmpty(thumb))
    {
      int thumbSize = 400; // pixels size of picture -> horizontal
      thumb += "_SX" + thumbSize + ".jpg";
    }

    _strBody = string.Empty;
    return thumb;
  }

  private void GetExtraDataImdb(ref IMDBMovie movie)
  {
    //Update title/Year
    string rxTitleBlock = "<h1>.*?</h1>";
    string titleBlock =
      Regex.Match(_strBody, rxTitleBlock, RegexOptions.Singleline | RegexOptions.IgnoreCase).Value.Trim();
    string regex =
      @"<h1>(?<movieTitle>.*?)[(].*?(?<movieYear>\d{4})";
    string title =
    Regex.Match(titleBlock, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["movieTitle"].Value;
    int year = 0;
    int.TryParse(
      Regex.Match(titleBlock, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["movieYear"].Value.Trim
        (), out year);

    if (title != string.Empty)
    {
      title = title.Replace("\n", "");
      title = Utils.stripHTMLtags(title).Trim();
      title = HttpUtility.HtmlDecode(title);
      movie.Title = title;
    }

    if (year == 0)
    {
      year = DateTime.Today.Year + 3;
    }

    movie.Year = year;

    // Director
    string rxDirectorsBlock = @"<h3\sclass=""inline-block"">Director[s]?:</h3>(?<director>.*?)</span>";
    string directorsBlock =
      Regex.Match(_strBody, rxDirectorsBlock, RegexOptions.Singleline | RegexOptions.IgnoreCase).Value;
    regex = @"<span\sitemprop=""name"">(?<director>.*?)</span>";
    string director =
      Regex.Match(directorsBlock, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["director"].Value;


    if (director == string.Empty)
    {
      director = Strings.Unknown;
    }
    else
    {
      movie.WritingCredits = HttpUtility.HtmlDecode(director.Replace("\n", string.Empty));
      if (movie.WritingCredits != null) movie.WritingCredits = movie.WritingCredits.Replace(",", ", ");
    }

    // Genre
    regex = @"<h3>Genres</h3>(?<genre>.+?)</section>";
    string genre =
      Regex.Match(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["genre"].Value.Trim();
    genre = HttpUtility.HtmlDecode(Utils.stripHTMLtags(genre.Replace("\n", "")));
    if (string.IsNullOrEmpty(genre))
    {
      genre = Strings.Unknown;
    }
    else
    {
      genre = genre.Replace(" ", "");
      genre = genre.Replace("|", ", ");
    }
    movie.SingleGenre = genre;

    // Rating
    regex = @"itemprop=""contentRating""\scontent=""(?<rating>.+?)""";
    string mpaaRating =
      Regex.Match(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["rating"].Value.Trim();
    if (mpaaRating == string.Empty)
    {
      mpaaRating = Strings.Unknown;
    }

    movie.MPARating = mpaaRating;

    // Actors
    regex = @"itemprop='url'>\s<strong>(?<actor>.*?)</strong>";
    MatchCollection actors = Regex.Matches(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase);
    string strActor = string.Empty;
    int actorNo = 0;

    foreach (Match actor in actors)
    {
      string tmpActor = actor.Groups["actor"].Value;
      tmpActor = HttpUtility.HtmlDecode(tmpActor);

      if (tmpActor != string.Empty && actorNo < 4)
      {
        strActor += tmpActor + " / ";
        actorNo++;
      }
    }

    int index = strActor.LastIndexOf(" /");

    if (index > 0)
    {
      strActor = strActor.Remove(index);
    }

    movie.Cast = strActor;
    _strBody = string.Empty;
  }

  private string GetPlot(string strUrl, string regex, ref string strBody)
  {
    string absoluteUri;
    strBody = HttpUtility.HtmlDecode(GetPage(strUrl, "utf-8", out absoluteUri));

    if (strBody != null)
    {
      string shortPlot = Regex.Match(strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["moviePlot"].Value.
        Replace("&amp;", "&").
        Replace("&lt;", "<").
        Replace("&gt;", ">").
        Replace("&quot;", "\"").
        Replace("&apos;", "'").
        Replace("No overview found.", string.Empty).Trim();


      shortPlot = Utils.stripHTMLtags(shortPlot);

      // extra cleanup
      if (!string.IsNullOrEmpty(shortPlot))
      {
        int index = shortPlot.LastIndexOf(@"See full summary");

        if (index > 0)
        {
          shortPlot = shortPlot.Remove(index);
        }

        index = shortPlot.LastIndexOf(@"See full synopsis");

        if (index > 0)
        {
          shortPlot = shortPlot.Remove(index);
        }

        index = shortPlot.LastIndexOf("\n");

        if (index > 0)
        {
          shortPlot = shortPlot.Remove(index);
        }
      }
      return shortPlot;
    }
    return string.Empty;
  }

  #endregion

  #region Actor/ActorDetails

  public ArrayList FindIMDBActor(string strURL)
  {
    ArrayList elements = new ArrayList();
    try
    {
      string absoluteUri;
      // UTF-8 have problem with special country chars, default IMDB enc is used
      string strBody = GetPage(strURL, "utf-8", out absoluteUri);
      string value = string.Empty;
      HTMLParser parser = new HTMLParser(strBody);

      if ((parser.skipToEndOf("<title>")) &&
          (parser.extractTo("</title>", ref value)) &&
          !value.ToLowerInvariant().Equals("find - imdb"))
      {
        value = new HTMLUtil().ConvertHTMLToAnsi(value);
        value = Utils.RemoveParenthesis(value).Trim();
        IMDB.IMDBUrl oneUrl = new IMDB.IMDBUrl(absoluteUri, value, "IMDB");
        elements.Add(oneUrl);
        return elements;
      }

      parser.resetPosition();

      string popularBody = string.Empty;
      string exactBody = string.Empty;
      string url = string.Empty;
      string name = string.Empty;
      string role = string.Empty;

      if (parser.skipToStartOfNoCase("</a>Names"))
      {
        parser.skipToEndOf("<table class=\"findList\">");
        parser.extractTo("</table>", ref popularBody);

        parser = new HTMLParser(popularBody);

        while (parser.skipToStartOf("result_text"))
        {
          parser.skipToEndOf("href=\"");
          parser.extractTo("/?", ref url);
          parser.skipToEndOf("\"");
          parser.skipToEndOf(">");
          parser.extractTo("</a>", ref name);
          parser.skipToEndOf("<small>(");
          parser.extractTo("<a href", ref role);

          if (role != string.Empty)
          {
            name += " - " + role;
          }

          name = new HTMLUtil().ConvertHTMLToAnsi(name);
          name = Utils.RemoveParenthesis(name).Trim();
          IMDB.IMDBUrl newUrl = new IMDB.IMDBUrl("http://www.imdb.com" + url, name, "IMDB");
          elements.Add(newUrl);
          parser.skipToEndOf("</tr>");
        }
      }
      parser = new HTMLParser(strBody);

      if (parser.skipToStartOfNoCase("Exact Matches"))
      {
        parser.skipToEndOf("<table>");
        parser.extractTo("</table>", ref exactBody);
      }
      else if (parser.skipToStartOfNoCase("Approx Matches"))
      {
        parser.skipToEndOf("<table>");
        parser.extractTo("</table>", ref exactBody);
      }
      else
      {
        return elements;
      }

      parser = new HTMLParser(exactBody);
      url = string.Empty;
      name = string.Empty;
      role = string.Empty;

      while (parser.skipToStartOf("href=\"/name/"))
      {
        parser.skipToEndOf("href=\"");
        parser.extractTo("\"", ref url);
        parser.skipToEndOf("Image()).src='/rg/find-name-");
        parser.skipToEndOf("';\">");
        parser.extractTo("</a>", ref name);
        parser.skipToEndOf("<small>(");
        parser.extractTo(",", ref role);

        if (role != string.Empty)
        {
          name += " - " + role;
        }

        name = new HTMLUtil().ConvertHTMLToAnsi(name);
        name = Utils.RemoveParenthesis(name).Trim();
        IMDB.IMDBUrl newUrl = new IMDB.IMDBUrl("http://www.imdb.com" + url, name, "IMDB");
        elements.Add(newUrl);
        parser.skipToEndOf("</tr>");
      }
    }
    catch (Exception ex)
    {
      Log.Error("exception for imdb lookup of {0} err:{1} stack:{2}", strURL, ex.Message, ex.StackTrace);
    }
    return elements;
  }

  public bool GetActorDetails(IMDB.IMDBUrl url, out IMDBActor actor)
  {
    actor = new IMDBActor();

    try
    {
      #region Actor imdb id

      // IMDBActorID
      try
      {
        int pos = url.URL.LastIndexOf("nm");
        string id = url.URL.Substring(pos, 9).Replace("/", string.Empty);
        actor.IMDBActorID = id;
        url.URL = string.Format("http://m.imdb.com/name/{0}", id);
      }
      catch (Exception)
      {
        return false;
      }

      #endregion

      string absoluteUri;
      string html = GetPage(url.URL, "utf-8", out absoluteUri);

      if (string.IsNullOrEmpty(html))
      {
        return false;
      }

      HTMLParser parser = new HTMLParser(html);
      string strThumb = string.Empty;
      string value = string.Empty;
      parser.extractTo("<footer class=\"", ref value);
      parser.Content = value;
      value = string.Empty;

      #region Actor name

      // Actor name
      if (parser.skipToEndOf("<section id=\"name-overview\">") &&
          parser.skipToEndOf("<h1>") &&
          parser.extractTo("</h1>", ref value))
      {
        value = new HTMLUtil().ConvertHTMLToAnsi(value);
        value = Utils.RemoveParenthesis(value).Trim();
        value = HttpUtility.HtmlDecode(value.Trim());
        value = Utils.stripHTMLtags(value);
        actor.Name = value.Replace("\n", "");
      }

      if (actor.Name == string.Empty)
      {
        actor.Name = url.Title;
      }

      #endregion

      #region Kinopoisk Actor Page
      Log.Debug("Version: actor.kinopoisk.ru {0}.", strKinopoiskVersion);

      // Kinopoisk Actor URL
      string KPURL    = string.Format("http://www.kinopoisk.ru/index.php?kp_query={0}", actor.Name);
      string KPhtml   = GetKPPage(KPURL, "windows-1251", out absoluteUri);
      string KPName   = string.Empty;
      string KPHeight = string.Empty;
      string KPSign   = string.Empty;
      KPURL = string.Empty;

      HTMLParser KParser = new HTMLParser(KPhtml);
      string KPvalue      = string.Empty;
      KParser.skipToEndOf("<div class=\"info\">");
      KParser.extractTo("<div class=\"search_results\">", ref KPvalue);
      KParser.Content = KPvalue;
      KPvalue = string.Empty;

      if (KParser.skipToEndOf("<p class=\"name\">") &&
          KParser.skipToEndOf("<a href=\"") &&
          KParser.skipToEndOf("name/") &&
          KParser.extractTo("/", ref KPvalue))
      {
        KPvalue = KPvalue.Trim();
        if (KPvalue != string.Empty)
        {
          KPURL = string.Format("http://www.kinopoisk.ru/name/{0}/view_info/ok/",KPvalue);
        }
      }
      Log.Debug(":: {1} URL: {0}", string.IsNullOrEmpty(KPURL) ? "None" : KPURL , actor.Name);

      // Kinopoisk Actor name & page
      if (KPURL != string.Empty)
      {
         KPhtml = GetKPPage(KPURL, "windows-1251", out absoluteUri);
         KParser.Content = KPhtml;
         KPvalue = string.Empty;

         KParser.skipToEndOf("<div id=\"headerPeople\" class=\"country_num\">");
         KParser.extractTo("id=\"ta_actor_notice\">", ref KPvalue);
         KParser.Content = KPvalue;
         KPvalue = string.Empty;

         if (KParser.skipToEndOf("itemprop=\"name\">") &&
             KParser.extractTo("</h1>", ref KPvalue))
         {
            KPvalue = new HTMLUtil().ConvertHTMLToAnsi(KPvalue);
            KPvalue = Utils.RemoveParenthesis(KPvalue).Trim();
            KPvalue = HttpUtility.HtmlDecode(KPvalue.Trim());
            KPvalue = Utils.stripHTMLtags(KPvalue);
            Log.Debug(":: {1} IMDB Name -> Kinopoisk Name: {0}", KPvalue, actor.Name);
            actor.Name = KPvalue.Trim();
            KPName = KPvalue.Trim();
         }
      }

      #endregion

      // Photo
      string parserTxt = parser.Content;
      string photoBlock = string.Empty;
      parser.resetPosition();

      #region Actor photo

      if (parser.skipToStartOf("<img id=\"name-poster\"") &&
          parser.skipToEndOf("class=\"media-object\"") &&
          parser.extractTo("itemprop=\"image\"", ref photoBlock))
      {
        parser.Content = photoBlock;

        if (parser.skipToEndOf("src=\"") &&
            parser.extractTo("_V1", ref strThumb))
        {
          actor.ThumbnailUrl = strThumb + "_V1_SX250.jpg";
        }
        parser.Content = parserTxt;
      }

      // Kinopoisk
      if (actor.ThumbnailUrl == string.Empty) {
        if (KParser.skipToEndOf("id=\"photoBlock\"")) {
          if (KParser.skipToEndOf("<img title=") &&
              KParser.skipToEndOf(" src=\"") &&
              KParser.extractTo("\"", ref value)) {
            value = Utils.stripHTMLtags(value);
            if (value.IndexOf("photo_none", 0) > 0) {
              value = string.Empty;
            } 
            Log.Debug(":: {1} Thumbs: {0}", value, KPName);
            if (value != string.Empty) {
              actor.ThumbnailUrl = value.Trim();
            }
          }
        }
      }

      #endregion

      #region Actor birth date/place

      // Birth date/Place
      if (parser.skipToEndOf("<strong>Born:</strong>"))
      {
        if (parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"birthDate\">") &&
            parser.extractTo("</time>", ref value))
        {
          value = value.Replace("\n", "").Trim();
          value = value.Replace("  ", "");
          value = value.Replace(",", ", ");
          actor.DateOfBirth = value;
        }

        // Birth place
        if (parser.skipToEndOf("<h3>Born</h3>") &&
            parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"birthDate\">") &&
            parser.skipToEndOf("</span><br />") &&
            parser.skipToEndOf("<span>") &&
            parser.extractTo("</span>\n        </p>", ref value))
        {
          actor.PlaceOfBirth = HttpUtility.HtmlDecode(value);
        }

      }
      
      // Kinopoisk
      if (KParser.skipToEndOf("рост"))
      {
        if (KParser.skipToEndOf("<span>") &&
            KParser.extractTo("</span>", ref value))
        {
          value = HttpUtility.HtmlDecode(value.Trim());
          value = Utils.stripHTMLtags(value);
          Log.Debug(":: {1} Height: {0}", value, KPName);
          if (value != string.Empty)
          {
            KPHeight = value;
          }
        }
      }
      if (KParser.skipToEndOf("birthDate=\""))
      {
        if (KParser.skipToEndOf("\">") &&
            KParser.extractTo("<span class=", ref value))
        {
          value = HttpUtility.HtmlDecode(value.Trim());
          value = Utils.stripHTMLtags(value);
          Log.Debug(":: {1} Birth: {0}", value, KPName);
          if (value != string.Empty)
          {
            actor.DateOfBirth = value;
          }
        }
        // Birth sign
        if (KParser.skipToEndOf("<span class=\"zod\">") &&
            KParser.skipToEndOf("\">") &&
            KParser.extractTo("</a>", ref value))
        {
          value  = HttpUtility.HtmlDecode(value.Trim());
          value  = Utils.stripHTMLtags(value);
          KPSign = value;
          Log.Debug(":: {1} Sign: {0}", value, KPName);
        }
        // Birth place
        if (KParser.skipToEndOf("<td class=\"type\">") &&
            KParser.skipToEndOf("<span>") &&
            KParser.extractTo("</span>", ref value))
        {
          value = HttpUtility.HtmlDecode(value.Trim());
          value = Utils.stripHTMLtags(value);
          Log.Debug(":: {1} Birth place: {0}", value, KPName);
          if (value != string.Empty)
          {
            actor.PlaceOfBirth = value;
          }
        }
      }

      #endregion

      #region Actor death date/place

      parser.resetPosition();

      // Death date
      if (parser.skipToEndOf("<strong>Died:</strong> "))
      {
        if (parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"deathDate\">") &&
            parser.extractTo("</time>", ref value))
        {
          value = value.Replace("\n", "").Trim();
          value = value.Replace("  ", "");
          value = value.Replace(",", ", ");
          actor.DateOfDeath = value;
        }

        // Death place
        if (parser.skipToEndOf("<h3>Died</h3>") &&
            parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"deathDate\">") &&
            parser.skipToEndOf("</span><br />") &&
            parser.skipToEndOf("<span>") &&
            parser.extractTo("</span>", ref value))
        {
          actor.PlaceOfDeath = HttpUtility.HtmlDecode(value);
        }
      }

      // Kinopoisk
      if (KParser.skipToEndOf("дата смерти"))
      {
        if (KParser.skipToEndOf("<span>") &&
            KParser.extractTo("<span class=", ref value))
        {
          value = HttpUtility.HtmlDecode(value.Trim());
          value = Utils.stripHTMLtags(value);
          Log.Debug(":: {1} Death: {0}", value, KPName);
          if (value != string.Empty)
          {
            actor.DateOfDeath = value;
          }
        }
        // Birth place
        if (KParser.skipToEndOf("<td class=\"type\">") &&
            KParser.skipToEndOf("<span>") &&
            KParser.extractTo("</span>", ref value))
        {
          value = HttpUtility.HtmlDecode(value.Trim());
          value = Utils.stripHTMLtags(value);
          Log.Debug(":: {1} Death place: {0}", value, KPName);
          if (value != string.Empty)
          {
            actor.PlaceOfDeath = value ;
          }
        }
      }

      #endregion

      //Mini Biography

      #region Actor biography

      parser.resetPosition();

      if (parser.skipToEndOf("<a href=\"bio?ref_=m_mn_ov_bio\" class=\"btn-full\" > <p>") &&
        parser.extractTo("</p>", ref value))
      {
        value = new HTMLUtil().ConvertHTMLToAnsi(value);
        value = Utils.stripHTMLtags(value).Trim();
        value = HttpUtility.HtmlDecode(value);
        actor.MiniBiography = value;
        if (KPName != string.Empty)
        {
         actor.MiniBiography = string.Format("{0}"+(KPSign != string.Empty ? " ({1})" : "")+(KPHeight != string.Empty ? " Рост: {3}" : "")+(actor.MiniBiography != string.Empty ? ":\n{2}" : ""), KPName, KPSign, actor.MiniBiography, KPHeight);
        }

        string fullBioUrl = string.Format("http://m.imdb.com/name/{0}/bio?ref_=m_mn_ov_bio", actor.IMDBActorID);
        html = GetPage(fullBioUrl, "utf-8", out absoluteUri);
        parser.Content = html;

        if (parser.skipToEndOf(" <section id=\"name-bio\">") &&
            parser.skipToEndOf("<p>") &&
            parser.extractTo("</p>", ref value))
        {
          value = new HTMLUtil().ConvertHTMLToAnsi(value);
          value = Utils.stripHTMLtags(value).Trim();
          value = HttpUtility.HtmlDecode(value);
          actor.Biography = value;
        }

        // Kinopoisk Actor trivia
        if (KPName != string.Empty)
        {
          string rx_trivia        = @"<li[^>]+?trivia.+?>(?<movieTrivia>.+?)</li>";
          ArrayList triviaList    = Parse(KPhtml, rx_trivia);
          value = string.Empty;
          if (triviaList != null && triviaList.Count > 0) {
            for(int i = 0; i < triviaList.Count; i++) {
              Hashtable trivia = (Hashtable)triviaList[i];
              string triviaText = (string)trivia["movieTrivia"];
              triviaText = triviaText.Trim().Replace("\n", "");
              triviaText = Utils.stripHTMLtags(triviaText).Trim();;
              triviaText = HttpUtility.HtmlDecode(triviaText);
              Log.Debug(":: {1} Trivia: {0}", triviaText, KPName);;
              value += "- "+triviaText+"\n"; 
            }
            if (value != string.Empty)
            {
              actor.Biography = value+"\n\n"+actor.Biography+"\n\n" ;
            }
          }
        }
      }

      #endregion

      // Person is movie director or an actor/actress
      bool isActor = false;
      bool isActress = false;
      bool isDirector = false;
      bool isWriter = false;
      bool isSelf = false;

      url.URL = string.Format("http://m.imdb.com/name/{0}/filmotype", actor.IMDBActorID);
      html = GetPage(url.URL, "utf-8", out absoluteUri);

      if (string.IsNullOrEmpty(html))
      {
        return false;
      }

      parser.Content = html;

      #region Check person role in movie (actor, director or writer)

      if (parser.skipToEndOf("filmotype/director"))
      {
        isDirector = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/writer"))
      {
        isWriter = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/actress"))
      {
        isActress = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/actor"))
      {
        isActor = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/self"))
      {
        isSelf = true;
      }

      #endregion

      parser = null;

      #region Get movies for every role

      // Get filmography Actor
      if (isActor || isActress)
      {
        GetActorMovies(actor, isActor, isActress, false, false, false);
      }

      // Get filmography Actor self
      if (isSelf)
      {
        GetActorMovies(actor, false, false, false, false, true);
      }

      // Get filmography for writers
      if (isWriter)
      {
        GetActorMovies(actor, false, false, false, true, false);
      }

      // Get filmography Director
      if (isDirector)
      {
        GetActorMovies(actor, false, false, true, false, false);
      }

      #endregion

      // Add filmography
      if (actor.Count > 0)
      {
        actor.SortActorMoviesByYear();
      }

      return true;
    }
    catch (Exception ex)
    {
      Log.Error("CSScript GetActorDetails({0} exception:{1} {2} {3}", url.URL, ex.Message,
        ex.Source, ex.StackTrace);
    }
    return false;
  }

  private void GetActorMovies(IMDBActor imdbActor, bool actor, bool actress, bool director, bool writer, bool self)
  {
    string movies = string.Empty;
    string actorUrl = string.Empty;
    string actorHtml = string.Empty;
    string uri = string.Empty;

    if (actor) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/actor", imdbActor.IMDBActorID);
    if (actress) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/actress", imdbActor.IMDBActorID);
    if (director) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/director", imdbActor.IMDBActorID);
    if (writer) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/writer", imdbActor.IMDBActorID);
    if (self) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/self", imdbActor.IMDBActorID);

    actorHtml = GetPage(actorUrl, "utf-8", out uri);
    if (string.IsNullOrEmpty(actorHtml)) return;
    HTMLParser parser = new HTMLParser();
    parser.Content = actorHtml;
    // Get films and roles block
    if (!parser.skipToEndOf("<section id=\"name-filmo-content\">"))
    {
      Log.Error("GetActorMovies(): HTMLparser content is empty.");
    }
    else
    {
      parser.skipToEndOf("<section id=\"name-filmo-content\">");
      parser.extractTo("</section>", ref movies);
      parser.Content = movies;

      // Parse block for evey film and get year, title and it's imdbID and role
      while (parser.skipToStartOf("<div class=\"col-xs-12"))
      {
        if (parser.skipToEndOf("<a href=\""))
        {
          //HTMLParser movieParser = new HTMLParser(movie);
          string title = string.Empty;
          string strYear = string.Empty;
          string role = string.Empty;
          string imdbID = string.Empty;

          // IMDBid
          parser.skipToEndOf("title/");
          parser.extractTo("/", ref imdbID);

          // Title
          //movieParser.resetPosition();
          parser.skipToEndOf("<span class=\"h3\">");
          parser.extractTo("</span>", ref title);

          title = CleanCrlf(title);

          parser.extractTo("<p", ref strYear);

          if (!string.IsNullOrEmpty(title) && !SkipNoMovies(strYear.Trim(), self))
          {
            // Year
            strYear = Regex.Replace(strYear, "([(]|[)])", string.Empty).Trim();

            if (strYear.Length > 4)
            {
              strYear = Regex.Match(strYear, @"\d{4}").Value; // strYear.Substring(0, 4);
            }

            // Roles actor
            if (!director && !writer && !self)
            {
              if (parser.skipToEndOf("class=\"h4 unbold\">"))
              {
                parser.extractTo("</p>", ref role);
                role = CleanCrlf(role);
              }
            }
            else if (self)
            {
              string sRole = string.Empty;

              if (parser.skipToEndOf("class=\"h4 unbold\">"))
              {
                parser.extractTo("</p>", ref sRole);
                role = CleanCrlf(sRole);
              }
            }  
            else if (director)
            {
              role = GUILocalizeStrings.Get(199).Replace(":", string.Empty);
            }
            else // Writer
            {
              string wRole = string.Empty;

              if (parser.skipToEndOf("class=\"h4 unbold\">"))
              {
                parser.extractTo("</p>", ref wRole);
                wRole = CleanCrlf(wRole);
              }

              if (!string.IsNullOrEmpty(wRole))
              {
                // Remove parentheses (leave text inside)
                wRole = Regex.Replace(wRole, "([(]|[)])", string.Empty);
                role = GUILocalizeStrings.Get(200) + " " + wRole;
              }
              else
              {
                role = GUILocalizeStrings.Get(200).Replace(":", string.Empty);
              }
            }

            int year = 0;
            // Set near future for movies without year (99% it's a future project)
            if (!Int32.TryParse(strYear, out year))
            {
              year = DateTime.Today.Year + 3;
            }

            IMDBActor.IMDBActorMovie actorMovie = new IMDBActor.IMDBActorMovie();
            title = RemoveParenthesis(title).Trim();
            role = RemoveParenthesis(role).Trim();
            actorMovie.MovieTitle = title;
            actorMovie.Role = role;
            actorMovie.Year = year;
            actorMovie.MovieImdbID = imdbID;
            // Check if director/writer/self movie exists in actors movies, append role
            // to already fetched actor movie role(no duplicate movie entries)
            bool skipAdd = false;

            if (writer || director || self)
            {
              for (int i = 0; i < imdbActor.Count; i++)
              {
                if (imdbActor[i].MovieImdbID == imdbID)
                {
                  if (imdbActor[i].Role != string.Empty)
                  {
                    imdbActor[i].Role = role + ", " + imdbActor[i].Role;
                  }
                  else
                  {
                    imdbActor[i].Role = role;
                  }

                  skipAdd = true;
                  break;
                }
              }
            }

            if (!skipAdd)
            {
              imdbActor.Add(actorMovie);
            }
          }
        }
      }
    }
  }

  /// <summary>
  /// Removes HTML tags, cleans \n (to space) and \r (to empty string), decode string and remove last slash char
  /// </summary>
  /// <param name="stringToClean"></param>
  /// <returns></returns>
  private string CleanCrlf(string stringToClean)
  {
    string cleanString = string.Empty;
    cleanString = Utils.stripHTMLtags(stringToClean).Trim();
    cleanString = HttpUtility.HtmlDecode(cleanString.Replace("\n", " ").Replace("\r", string.Empty).Trim());

    if (cleanString != null && cleanString.EndsWith("/"))
    {
      cleanString = cleanString.Remove(cleanString.LastIndexOf("/"));
    }

    return cleanString;
  }

  private string RemoveParenthesis(string name)
  {
    while (name.IndexOf("(") != -1)
    {
      int start = name.IndexOf("(");
      int end = name.IndexOf(")");
      if (end != -1)
      {
        name = name.Substring(0, start) + name.Substring(end + 1);
      }
      else
      {
        break;
      }
    }

    return name;
  }

  // Clean trash from real movies
  private bool SkipNoMovies(string title, bool isSelf)
  {
    string rxExpression = string.Empty;

    if (isSelf)
    {
      rxExpression =
        @"[(](short|documentary)[)]|video\s(short|game)|tv\s(mini-series|series|short|documentary|special)|documentary\s(short)|[(]short|[(]documentary|\sdocumentary[(](short|documentary)[)]|video\s(short|game)|tv\s(mini-series|series|short|documentary|special)|documentary\s(short)|[(]short|[(]documentary|\sdocumentary|tv\smovie";
    }
    else
    {
      rxExpression =
        @"[(](short|documentary)[)]|video\s(short|game)|tv\s(mini-series|series|short|documentary|special)|documentary\s(short)|[(]short|[(]documentary|\sdocumentary";
    }
    if (Regex.Match(title.Trim(), rxExpression, RegexOptions.IgnoreCase).Success)
    {
      return true;
    }
    return false;
  }

  #endregion

  #region IMDBMovieActorsList

  public ArrayList GetIMDBMovieActorsList(string imdbMovieID, bool shortActorsList)
  {
    string absUri = string.Empty;
    ArrayList actorList = new ArrayList();
    string movieURL = string.Format("http://www.imdb.com/title/{0}/combined", imdbMovieID);
    string strBodyActors = GetPage(movieURL, "utf-8", out absUri);

    if (string.IsNullOrEmpty(strBodyActors))
    {
      return actorList;
    }

    // Director
    string strDirectorImdbId = string.Empty;
    string strDirectorName = string.Empty;
    string regexBlockPattern = @"name=""director[s]""(?<directors_block>.*?)<h5>";
    string regexPattern = @"<a\s+href=""/name/(?<idDirector>nm\d{7})/""[^>]*>(?<movieDirectors>[^<]+)</a>";
    string regexBlock = Regex.Match(HttpUtility.HtmlDecode(strBodyActors),
      regexBlockPattern, RegexOptions.Singleline).Groups["directors_block"].Value;
    strDirectorImdbId = Regex.Match(regexBlock, regexPattern, RegexOptions.Singleline).Groups["idDirector"].Value;
    strDirectorName = Regex.Match(regexBlock, regexPattern, RegexOptions.Singleline).Groups["movieDirectors"].Value;

    if (strDirectorImdbId != string.Empty)
    {
      string strKDirectorName = GetActorKinopiskName(strDirectorName);
      if (strKDirectorName != string.Empty)
      {
        strDirectorName = strKDirectorName;
      }
      // Add prefix that it's director, will be removed on fetching details
      actorList.Add("*d" + strDirectorName + "|" + strDirectorImdbId + "|" + GUILocalizeStrings.Get(199).Replace(":", string.Empty));
    }

    //Writers
    regexBlockPattern = @"<h5>Writer[s]?[^:]*:</h5>[^<]*(?<writers_block>.*?)</div>";
    regexBlock = Regex.Match(HttpUtility.HtmlDecode(strBodyActors),
      regexBlockPattern, RegexOptions.Singleline).Groups["writers_block"].Value;

    regexPattern = @"href=""/name/(?<imdbWriterId>nm\d{7})/[^>]*>(?<writer>[^<]+)</a>[^(]*(?<wrole>[^)]*\))|href=""/name/(?<imdbWriterId>nm\d{7})/[^>]*>(?<writer>[^<]+)</a>(?<wrole>)";
    MatchCollection mc = Regex.Matches(regexBlock, regexPattern);

    if (mc.Count != 0)
    {
      foreach (Match m in mc)
      {
        string writerId = string.Empty;
        writerId = HttpUtility.HtmlDecode(m.Groups["imdbWriterId"].Value.Trim());

        string strWriterName = string.Empty;
        strWriterName = HttpUtility.HtmlDecode(m.Groups["writer"].Value.Trim());

        string strKWriterName = GetActorKinopiskName(strWriterName);
        if (strKWriterName != string.Empty)
        {
          strWriterName = strKWriterName;
        }

        string writerRole = string.Empty;
        writerRole = HttpUtility.HtmlDecode(m.Groups["wrole"].Value.Trim());

        bool found = false;

        for (int i = 0; i < actorList.Count; i++)
        {
          if (writerId != null)
          {
            if (actorList[i].ToString().Contains(writerId))
            {
              // Check if writer is also director and add new role
              if (!string.IsNullOrEmpty(writerRole))
              {
                actorList[i] = actorList[i] + ", " + GUILocalizeStrings.Get(200) + " " + writerRole.Replace("(", string.Empty).Replace(")", string.Empty);
                found = true;
              }
              else
              {
                actorList[i] = actorList[i] + ", " + GUILocalizeStrings.Get(200).Replace(":", string.Empty);
                found = true;
              }
              break;
            }
          }
        }

        if (!found && writerId != string.Empty)
        {
          if (!string.IsNullOrEmpty(writerRole))
          {
            actorList.Add(strWriterName + "|" + writerId + "|" +
                        GUILocalizeStrings.Get(200) + " " + writerRole.Replace("(", string.Empty).Replace(")", string.Empty));
          }
          else
          {
            actorList.Add(strWriterName + "|" + writerId + "|" +
                        GUILocalizeStrings.Get(200).Replace(":", string.Empty));
          }
        }
      }
    }

    // cast
    regexBlockPattern = @"<table class=""cast"">.*?</table>|<table class=""cast_list"">.*?</table>";
    regexPattern = @"<td[^<]*<a\s+href=""/name/(?<imdbActorID>nm\d{7})/""[^>]*>(?<actor>[^<]*)</a>.*?<td.class=""char"">(?<role>.*?)<*?</td>";
    Match castBlock = Regex.Match(strBodyActors, regexBlockPattern, RegexOptions.Singleline);
    string strCastBlock = HttpUtility.HtmlDecode(castBlock.Value);

    if (strCastBlock != null)
    {
      mc = Regex.Matches(strCastBlock, regexPattern, RegexOptions.Singleline);

      if (mc.Count != 0)
      {
        int actorsCount = 0;

        foreach (Match m in mc)
        {
          string strActorID = string.Empty;
          strActorID = m.Groups["imdbActorID"].Value;
          strActorID = Utils.stripHTMLtags(strActorID).Trim();

          string strActorName = string.Empty;
          strActorName = m.Groups["actor"].Value;
          strActorName = Utils.stripHTMLtags(strActorName).Trim();
          
          string strKActorName = GetActorKinopiskName(strActorName);
          if (strKActorName != string.Empty)
          {
            strActorName = strKActorName;
          }
                 
          string strRole = string.Empty;
          strRole = m.Groups["role"].Value;
          strRole = HttpUtility.HtmlDecode(strRole);
          strRole = Utils.stripHTMLtags(strRole).Trim().Replace("\n", "");
          strRole = strRole.Replace(",", ";").Replace("  ", "");

          if (!strRole.StartsWith("("))
          {
            string regex = "(\\(.*\\))";
            strRole = Regex.Replace(strRole, regex, "").Trim();
          }
          else
          {
            string regex = "(\\(as.*\\))";
            strRole = Regex.Replace(strRole, regex, "").Trim().
                            Replace("(", string.Empty).
                            Replace(")", string.Empty);
          }

          // Check if we have allready actor as director (actor also is director for movie)
          bool found = false;

          for (int i = 0; i < actorList.Count; i++)
          {
            if (actorList[i].ToString().Contains(strActorID))
            {
              if (strRole != string.Empty)
              {
                actorList[i] = actorList[i] + ", " + strRole;
              }

              found = true;
              break;
            }
          }

          if (!found && strActorID != string.Empty)
          {
            actorList.Add(strActorName + "|" + strActorID + "|" + strRole);
          }

          actorsCount++;

          if (shortActorsList)
          {
            if (actorsCount >= 15)
            {
              return actorList;
            }
          }
        }
      }
    }
    return actorList;
  }

  #endregion

  #region Kinopoisk Actor Name

  private string GetActorKinopiskName(string Name)
  {
    Log.Debug("Version: actor.name.kinopoisk.ru {0}.", strKinopoiskVersion);

    // Kinopoisk Actor URL
    string absoluteUri;
    string KPURL  = string.Format("http://www.kinopoisk.ru/index.php?kp_query={0}", Name);
    string KPhtml = GetKPPage(KPURL, "windows-1251", out absoluteUri);
    string Result = string.Empty;
    KPURL = string.Empty;

    HTMLParser KParser = new HTMLParser(KPhtml);
    string KPvalue      = string.Empty;
    KParser.skipToEndOf("<div class=\"info\">");
    KParser.extractTo("<div class=\"search_results\">", ref KPvalue);
    KParser.Content = KPvalue;
    KPvalue = string.Empty;

    if (KParser.skipToEndOf("<p class=\"name\">") &&
        KParser.skipToEndOf("<a href=\"") &&
        KParser.skipToEndOf("name/") &&
        KParser.extractTo("/", ref KPvalue))
    {
      KPvalue = KPvalue.Trim();
      if (KPvalue != string.Empty)
      {
        KPURL = string.Format("http://www.kinopoisk.ru/name/{0}/view_info/ok/",KPvalue);
      }
    }
    Log.Debug(":: {1} URL: {0}", string.IsNullOrEmpty(KPURL) ? "None" : KPURL , Name);

    // Kinopoisk Actor name & page
    if (KPURL != string.Empty)
    {
       KPhtml = GetKPPage(KPURL, "windows-1251", out absoluteUri);
       KParser.Content = KPhtml;
       KPvalue = string.Empty;

       KParser.skipToEndOf("<div id=\"headerPeople\" class=\"country_num\">");
       KParser.extractTo("id=\"ta_actor_notice\">", ref KPvalue);
       KParser.Content = KPvalue;
       KPvalue = string.Empty;

       if (KParser.skipToEndOf("itemprop=\"name\">") &&
           KParser.extractTo("</h1>", ref KPvalue))
       {
          KPvalue = new HTMLUtil().ConvertHTMLToAnsi(KPvalue);
          KPvalue = Utils.RemoveParenthesis(KPvalue).Trim();
          KPvalue = HttpUtility.HtmlDecode(KPvalue.Trim());
          KPvalue = Utils.stripHTMLtags(KPvalue);
          Log.Debug(":: {1} IMDB Name -> Kinopoisk Name: {0}", KPvalue, Name);
          Result = KPvalue.Trim();
       }
    }
    return Result;
  }

  #endregion

  private ArrayList Parse(string input, string pattern) {
      ArrayList keyedMatches  = new ArrayList();
      try {
          Regex regEx             = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
          MatchCollection matches = regEx.Matches(input);
          
          // write matches and groups to variables
          foreach (Match currMatch in matches) {
              // store the groups in the match
              if (currMatch.Groups.Count > 1) {
                  Hashtable groupings = new Hashtable( );
                  for (int i = 1; i < currMatch.Groups.Count; i++)
                      groupings.Add(regEx.GroupNameFromNumber(i), currMatch.Groups[i].Value.Trim());
                  keyedMatches.Add(groupings);
              }
          }
      }
      catch (Exception e) {
          Log.Error("Regex expression failed! Exception: {0}", e.Message);
          Log.Error(e);
      }
      return keyedMatches;
  }

  private string GetPage(string strUrl, string strEncode, out string absoluteUri)
  {
    string strBody = "";
    absoluteUri = string.Empty;
    Stream receiveStream = null;
    StreamReader sr = null;
    WebResponse result = null;
    try
    {
      // Make the Webrequest
      HttpWebRequest req = (HttpWebRequest)WebRequest.Create(strUrl);

      try
      {
        string uu = "BCYmcFe4PTBQ8nEoIcCgT5AJwPk7BAOCg5XsQrvqKyvxEUpEB6KqjE0Uv_pqnPChVCCnD8vgTK3UtK7FGCdw39E2j-Fb5MWegRLgbNA2rFWeYUJbbXhRyUaxqGuuW3AZb1grBhmGMxhDJyH5ntFDj1X1Ejh_jqR6BaQUk6P16AN1EMPstTSBIqxVW08QEqMKQgsK75y8_s1Ss9tyDfZpLZzCWhO5qftGUn3_bbw_DBF6sTZDo6xK-zy88VZ8cws-D30P";
        string id = "BCYobsJMWRwG55i2yGvVuZe7v5twryi7KSxLglDHw2wVcI1rMq0OjHVT7duPo5NNHKDDVFBTVjJM4PoMonlTB_q9NvMCs-wB78Y1hGjdgCLX0SEEC2Y6BD4E3Z6cIoMwlhTDFSprYlxMqjEsFGYwWzVp1oIUYkZQ0kgpX_MvBrEh-fU";
        string cookieHeader = string.Format("uu={0}; id={1}", uu, id);
        req.Headers.Add("Cookie", cookieHeader);
        // req.Headers.Add("Accept-Language", "en-US,en;q=0.5");
        req.Headers.Add("Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.5");
        req.Proxy.Credentials = CredentialCache.DefaultCredentials;
        req.Timeout = 10000;
        req.ReadWriteTimeout = req.Timeout;
      }
      catch (Exception) { }
      result = req.GetResponse();
      receiveStream = result.GetResponseStream();

      // Encoding: depends on selected page
      Encoding encode = Encoding.GetEncoding(strEncode);
      using (sr = new StreamReader(receiveStream, encode))
      {
        strBody = sr.ReadToEnd();
      }

      absoluteUri = result.ResponseUri.AbsoluteUri;
    }
    catch (Exception ex)
    {
      Log.Error("InternalActorsScriptGrabber Error retrieving WebPage: {0} err:{1}", strUrl, ex.Message);
    }
    finally
    {
      if (sr != null)
      {
        try
        {
          sr.Close();
        }
        catch (Exception) { }
      }
      if (receiveStream != null)
      {
        try
        {
          receiveStream.Close();
        }
        catch (Exception) { }
      }
      if (result != null)
      {
        try
        {
          result.Close();
        }
        catch (Exception) { }
      }
    }
    return strBody;
  }

  private string GetKPPage(string strUrl, string strEncode, out string absoluteUri)
  {
    string strBody = "";
    absoluteUri = string.Empty;
    Stream receiveStream = null;
    StreamReader sr = null;
    WebResponse result = null;
    try
    {
      // Make the Webrequest
      HttpWebRequest req = (HttpWebRequest)WebRequest.Create(strUrl);

      try
      {
        req.Proxy.Credentials = CredentialCache.DefaultCredentials;
        req.UserAgent         = "Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)";
        req.Accept            = "text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
        req.Referer           = "http:\\www.kinopoisk.ru";
        req.Timeout           = 10000;
        req.ReadWriteTimeout  = req.Timeout;
        req.Headers.Add("Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.5");
      }
      catch (Exception) { }
      result = req.GetResponse();
      receiveStream = result.GetResponseStream();

      // Encoding: depends on selected page
      Encoding encode = Encoding.GetEncoding(strEncode);
      using (sr = new StreamReader(receiveStream, encode))
      {
        strBody = sr.ReadToEnd();
      }

      absoluteUri = result.ResponseUri.AbsoluteUri;
    }
    catch (Exception ex)
    {
      Log.Error("InternalActorsScriptGrabber Error retrieving WebPage: {0} err:{1}", strUrl, ex.Message);
    }
    finally
    {
      if (sr != null)
      {
        try
        {
          sr.Close();
        }
        catch (Exception) { }
      }
      if (receiveStream != null)
      {
        try
        {
          receiveStream.Close();
        }
        catch (Exception) { }
      }
      if (result != null)
      {
        try
        {
          result.Close();
        }
        catch (Exception) { }
      }
    }
    return strBody;
  }
}
