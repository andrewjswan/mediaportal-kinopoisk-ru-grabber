//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";
//css_reference "Newtonsoft.Json.dll";

using MediaPortal.GUI.Library;
using MediaPortal.Util;
using MediaPortal.Video.Database;

using Newtonsoft.Json;

using System;
using System.Text;
using System.IO;
using System.Net;
using System.Web;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;

internal class InternalActorsGrabber : IIMDBInternalActorsScriptGrabber
{
  const string strKinopoiskVersion = "20180227.I by ajs";

  private string _strBody = string.Empty;

  #region ActorMoviesDetails

  public bool GetPlotImdb(ref IMDBMovie movie)
  {
    string strUrl = String.Format("http://m.imdb.com/title/{0}", movie.IMDBNumber);
    string regex = @"<p itemprop=""description"">(?<moviePlot>.+?)</p>";

    _strBody = string.Empty;
    string shortPlot = GetPlot(strUrl, regex, ref _strBody);

    string pageNotFound = @"<h1>Page not found</h1>";

    if (Regex.Match(_strBody, pageNotFound, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success)
    {
      Log.Warn("GUIVideoArtistInfo-Actor movielist update Page not found: {0}", strUrl);
      return false;
    }

    // Full plot
    strUrl = String.Format("http://m.imdb.com/title/{0}/plotsummary", movie.IMDBNumber);
    regex = @">Plot\sSummary.*?<p\sclass=""text-large"">(?<moviePlot>.*?)</p>";

    string plotBody = string.Empty;
    string fullPlot = GetPlot(strUrl, regex, ref plotBody);

    if (fullPlot != string.Empty)
    {
      shortPlot = fullPlot.Trim();
    }

    movie.PlotOutline = shortPlot;
    // Director, actors, rating....
    GetExtraDataImdb(ref movie);
    return true;
  }

  public string GetThumbImdb(string imdbId)
  {
    TMDBCoverSearch tmdbSearch = new TMDBCoverSearch();
    tmdbSearch.SearchCovers("", imdbId);

    if ((tmdbSearch.Count > 0) && (tmdbSearch[0] != string.Empty))
    {
      return tmdbSearch[0];
    }

    _strBody = string.Empty;
    string thumb = string.Empty;

    string uri;
    string strUrl = String.Format("http://m.imdb.com/title/{0}", imdbId);
    _strBody = GetPage(strUrl, "utf-8", out uri);
    string regex = @"Poster"".src=""(?<poster>.*?_V1)";
    thumb = Regex.Match(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["poster"].Value;

    if (!string.IsNullOrEmpty(thumb))
    {
      int thumbSize = 400; // pixels size of picture -> horizontal
      thumb += "_SX" + thumbSize + ".jpg";
    }

    _strBody = string.Empty;
    return thumb;
  }

  private void GetExtraDataImdb(ref IMDBMovie movie)
  {
    //Update title/Year
    string rxTitleBlock = "<h1>.*?</h1>";
    string titleBlock =
      Regex.Match(_strBody, rxTitleBlock, RegexOptions.Singleline | RegexOptions.IgnoreCase).Value.Trim();
    string regex =
      @"<h1>(?<movieTitle>.*?)[(].*?(?<movieYear>\d{4})";
    string title =
    Regex.Match(titleBlock, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["movieTitle"].Value;
    int year = 0;
    int.TryParse(
      Regex.Match(titleBlock, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["movieYear"].Value.Trim
        (), out year);

    if (title != string.Empty)
    {
      title = title.Replace("\n", string.Empty);
      title = CleanCrlf(title);
      movie.Title = title;
    }

    if (year == 0)
    {
      year = DateTime.Today.Year + 3;
    }

    movie.Year = year;

    // Director
    string rxDirectorsBlock = @"<h3\sclass=""inline-block"">Director[s]?:</h3>(?<director>.*?)</span>";
    string directorsBlock =
      Regex.Match(_strBody, rxDirectorsBlock, RegexOptions.Singleline | RegexOptions.IgnoreCase).Value;
    regex = @"<span\sitemprop=""name"">(?<director>.*?)</span>";
    string director =
      Regex.Match(directorsBlock, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["director"].Value;


    if (director == string.Empty)
    {
      director = Strings.Unknown;
    }
    else
    {
      movie.WritingCredits = CleanCrlf(director.Replace("\n", string.Empty));
      if (movie.WritingCredits != null) 
      {
        movie.WritingCredits = movie.WritingCredits.Replace(",", ", ");
      }
    }

    // Genre
    regex = @"<h3>Genres</h3>(?<genre>.+?)</section>";
    string genre =
      Regex.Match(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["genre"].Value.Trim();
    genre = CleanCrlf(genre.Replace("\n", string.Empty));
    if (string.IsNullOrEmpty(genre))
    {
      genre = Strings.Unknown;
    }
    else
    {
      genre = genre.Replace(" ", "");
      genre = genre.Replace("|", ", ");
    }
    movie.SingleGenre = genre;

    // Rating
    regex = @"itemprop=""contentRating""\scontent=""(?<rating>.+?)""";
    string mpaaRating =
      Regex.Match(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["rating"].Value.Trim();
    if (mpaaRating == string.Empty)
    {
      mpaaRating = Strings.Unknown;
    }

    movie.MPARating = mpaaRating;

    // Actors
    regex = @"itemprop='url'>\s<strong>(?<actor>.*?)</strong>";
    MatchCollection actors = Regex.Matches(_strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase);
    string strActor = string.Empty;
    int actorNo = 0;

    foreach (Match actor in actors)
    {
      string tmpActor = actor.Groups["actor"].Value;
      tmpActor = CleanCrlf(tmpActor);

      if (tmpActor != string.Empty && actorNo < 4)
      {
        strActor += tmpActor + " / ";
        actorNo++;
      }
    }

    int index = strActor.LastIndexOf(" /");
    if (index > 0)
    {
      strActor = strActor.Remove(index);
    }

    movie.Cast = strActor;
    _strBody = string.Empty;
  }

  private string GetPlot(string strUrl, string regex, ref string strBody)
  {
    string absoluteUri;
    strBody = HttpUtility.HtmlDecode(GetPage(strUrl, "utf-8", out absoluteUri));

    if (strBody != null)
    {
      string shortPlot = Regex.Match(strBody, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["moviePlot"].Value.
        Replace("&amp;", "&").
        Replace("&lt;", "<").
        Replace("&gt;", ">").
        Replace("&quot;", "\"").
        Replace("&apos;", "'").
        Replace("No overview found.", string.Empty).Trim();


      shortPlot = Utils.stripHTMLtags(shortPlot);

      // extra cleanup
      if (!string.IsNullOrEmpty(shortPlot))
      {
        int index = shortPlot.LastIndexOf(@"See full summary");

        if (index > 0)
        {
          shortPlot = shortPlot.Remove(index);
        }

        index = shortPlot.LastIndexOf(@"See full synopsis");

        if (index > 0)
        {
          shortPlot = shortPlot.Remove(index);
        }

        index = shortPlot.LastIndexOf("\n");

        if (index > 0)
        {
          shortPlot = shortPlot.Remove(index);
        }
      }
      return shortPlot;
    }
    return string.Empty;
  }

  #endregion

  #region Actor/ActorDetails

  public ArrayList FindIMDBActor(string strURL)
  {
    ArrayList elements = new ArrayList();
    try
    {
      string absoluteUri;
      // UTF-8 have problem with special country chars, default IMDB enc is used
      string strBody = GetPage(strURL, "utf-8", out absoluteUri);
      string value = string.Empty;
      HTMLParser parser = new HTMLParser(strBody);

      if ((parser.skipToEndOf("<title>")) &&
          (parser.extractTo("</title>", ref value)) &&
          !value.ToLowerInvariant().Equals("find - imdb"))
      {
        value = new HTMLUtil().ConvertHTMLToAnsi(value);
        value = Utils.RemoveParenthesis(value).Trim();
        IMDB.IMDBUrl oneUrl = new IMDB.IMDBUrl(absoluteUri, value, "IMDB");
        elements.Add(oneUrl);
        return elements;
      }

      parser.resetPosition();

      string popularBody = string.Empty;
      string exactBody = string.Empty;
      string url = string.Empty;
      string name = string.Empty;
      string role = string.Empty;

      if (parser.skipToStartOfNoCase("</a>Names"))
      {
        parser.skipToEndOf("<table class=\"findList\">");
        parser.extractTo("</table>", ref popularBody);

        parser = new HTMLParser(popularBody);

        while (parser.skipToStartOf("result_text"))
        {
          parser.skipToEndOf("href=\"");
          parser.extractTo("/?", ref url);
          parser.skipToEndOf("\"");
          parser.skipToEndOf(">");
          parser.extractTo("</a>", ref name);
          parser.skipToEndOf("<small>(");
          parser.extractTo("<a href", ref role);

          if (role != string.Empty)
          {
            name += " - " + role;
          }

          name = new HTMLUtil().ConvertHTMLToAnsi(name);
          name = Utils.RemoveParenthesis(name).Trim();
          IMDB.IMDBUrl newUrl = new IMDB.IMDBUrl("http://www.imdb.com" + url, name, "IMDB");
          elements.Add(newUrl);
          parser.skipToEndOf("</tr>");
        }
      }
      parser = new HTMLParser(strBody);

      if (parser.skipToStartOfNoCase("Exact Matches"))
      {
        parser.skipToEndOf("<table>");
        parser.extractTo("</table>", ref exactBody);
      }
      else if (parser.skipToStartOfNoCase("Approx Matches"))
      {
        parser.skipToEndOf("<table>");
        parser.extractTo("</table>", ref exactBody);
      }
      else
      {
        return elements;
      }

      parser = new HTMLParser(exactBody);
      url = string.Empty;
      name = string.Empty;
      role = string.Empty;

      while (parser.skipToStartOf("href=\"/name/"))
      {
        parser.skipToEndOf("href=\"");
        parser.extractTo("\"", ref url);
        parser.skipToEndOf("Image()).src='/rg/find-name-");
        parser.skipToEndOf("';\">");
        parser.extractTo("</a>", ref name);
        parser.skipToEndOf("<small>(");
        parser.extractTo(",", ref role);

        if (role != string.Empty)
        {
          name += " - " + role;
        }

        name = new HTMLUtil().ConvertHTMLToAnsi(name);
        name = Utils.RemoveParenthesis(name).Trim();
        IMDB.IMDBUrl newUrl = new IMDB.IMDBUrl("http://www.imdb.com" + url, name, "IMDB");
        elements.Add(newUrl);
        parser.skipToEndOf("</tr>");
      }
    }
    catch (Exception ex)
    {
      MediaPortal.GUI.Library.Log.Error("exception for imdb lookup of {0} err:{1} stack:{2}", strURL, ex.Message, ex.StackTrace);
    }
    return elements;
  }

  public bool GetActorDetails(IMDB.IMDBUrl url, out IMDBActor actor)
  {
    actor = new IMDBActor();

    try
    {
      #region Actor imdb id

      // IMDBActorID
      try
      {
        int pos = url.URL.LastIndexOf("nm");
        string id = url.URL.Substring(pos, 9).Replace("/", string.Empty);
        actor.IMDBActorID = id;
        url.URL = string.Format("http://m.imdb.com/name/{0}", id);
      }
      catch (Exception)
      {
        return false;
      }

      #endregion

      string absoluteUri;
      string html = GetPage(url.URL, "utf-8", out absoluteUri);

      if (string.IsNullOrEmpty(html))
      {
        return false;
      }

      HTMLParser parser = new HTMLParser(html);
      string strThumb = string.Empty;
      string value = string.Empty;
      parser.extractTo("<footer class=\"", ref value);
      parser.Content = value;
      value = string.Empty;

      #region Actor name

      // Actor name
      if (parser.skipToEndOf("<section id=\"name-overview\">") &&
          parser.skipToEndOf("<h1>") &&
          parser.extractTo("</h1>", ref value))
      {
        value = new HTMLUtil().ConvertHTMLToAnsi(value);
        value = Utils.RemoveParenthesis(value).Trim();
        value = HttpUtility.HtmlDecode(value.Trim());
        value = Utils.stripHTMLtags(value);
        value = CleanCrlf(value.Replace("\n", string.Empty));
        actor.Name = Regex.Replace(value, @"\(\S+?\)", string.Empty).Trim();
      }

      if (string.IsNullOrEmpty(actor.Name))
      {
        actor.Name = url.Title;
      }

      #endregion

      #region Kinopoisk Actor 

      Log.Debug("Version: actor.kinopoisk.ru {0}.", strKinopoiskVersion);

      // Kinopoisk Actor Class
      KPPerson kpActor = GetPersonByName(actor.Name, true);

      #endregion

      // Photo
      string parserTxt = parser.Content;
      string photoBlock = string.Empty;
      parser.resetPosition();

      #region Actor photo

      if (parser.skipToStartOf("<img id=\"name-poster\"") &&
          parser.skipToEndOf("class=\"media-object\"") &&
          parser.extractTo("itemprop=\"image\"", ref photoBlock))
      {
        parser.Content = photoBlock;

        if (parser.skipToEndOf("src=\"") &&
            parser.extractTo("_V1", ref strThumb))
        {
          actor.ThumbnailUrl = strThumb + "_V1_SX250.jpg";
        }
        parser.Content = parserTxt;
      }

      // Kinopoisk
      if (string.IsNullOrEmpty(actor.ThumbnailUrl) && !string.IsNullOrEmpty(kpActor.Thumb))
      {
        actor.ThumbnailUrl = kpActor.Thumb.Trim();
      }

      #endregion

      #region Actor birth date/place

      // Birth date/Place
      if (parser.skipToEndOf("<strong>Born:</strong>"))
      {
        if (parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"birthDate\">") &&
            parser.extractTo("</time>", ref value))
        {
          value = value.Replace("\n", "").Trim();
          value = value.Replace("  ", "");
          value = value.Replace(",", ", ");
          actor.DateOfBirth = value;
        }

        // Birth place
        if (parser.skipToEndOf("<h3>Born</h3>") &&
            parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"birthDate\">") &&
            parser.skipToEndOf("</span>") &&
            parser.skipToEndOf("<br />") &&
            parser.skipToEndOf("<span>") &&
            parser.extractTo("</span>", ref value))
        {
          actor.PlaceOfBirth = HttpUtility.HtmlDecode(value);
        }

      }
      
      // Kinopoisk
      if (!string.IsNullOrEmpty(kpActor.Birthday))
      {
        actor.DateOfBirth = kpActor.Birthday;
      }
      // Birth place
      if (!string.IsNullOrEmpty(kpActor.Birthplace))
      {
        actor.PlaceOfBirth = kpActor.Birthplace;
      }

      #endregion

      #region Actor death date/place

      parser.resetPosition();

      // Death date
      if (parser.skipToEndOf("<strong>Died:</strong> "))
      {
        if (parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"deathDate\">") &&
            parser.extractTo("</time>", ref value))
        {
          value = value.Replace("\n", "").Trim();
          value = value.Replace("  ", "");
          value = value.Replace(",", ", ");
          actor.DateOfDeath = value;
        }

        // Death place
        if (parser.skipToEndOf("<h3>Died</h3>") &&
            parser.skipToEndOf("<time datetime=") &&
            parser.skipToEndOf("itemprop=\"deathDate\">") &&
            parser.skipToEndOf("</span>") &&
            parser.skipToEndOf("<br />") &&
            parser.skipToEndOf("<span>") &&
            parser.extractTo("</span>", ref value))
        {
          actor.PlaceOfDeath = HttpUtility.HtmlDecode(value);
        }
      }

      // Kinopoisk
      if (!string.IsNullOrEmpty(kpActor.Death))
      {
        actor.DateOfDeath = kpActor.Death;
      }
      // Birth place
      if (!string.IsNullOrEmpty(kpActor.Birthplace))
      {
        actor.PlaceOfDeath = kpActor.Deathplace;
      }

      #endregion

      //Mini Biography

      #region Actor biography

      parser.resetPosition();

      // if (parser.skipToEndOf("<a href=\"bio?ref_=m_mn_ov_bio\" class=\"btn-full\" > <p>") &&
      if (parser.skipToEndOf("<a href=\"bio?ref_=m_mn_ov_bio\"\nclass=\"btn-full\" > <p>") &&
        parser.extractTo("</p>", ref value))
      {
        value = new HTMLUtil().ConvertHTMLToAnsi(value);
        value = Utils.stripHTMLtags(value).Trim();
        value = HttpUtility.HtmlDecode(value);
        actor.MiniBiography = value;

        // Kinopoisk Actor mini Bio
        if (!string.IsNullOrEmpty(kpActor.Name))
        {
          actor.MiniBiography = string.Format("{0}" + (!string.IsNullOrWhiteSpace(kpActor.Sign) ? " ({1})" : string.Empty) + 
                                                      (!string.IsNullOrWhiteSpace(kpActor.Growth) ? " Рост: {3} м" : string.Empty) + 
                                                      (!string.IsNullOrWhiteSpace(actor.MiniBiography) ? ":\n{2}" : ""), 
                                              kpActor.Name, kpActor.Sign, actor.MiniBiography, kpActor.Growth);
        }

        string fullBioUrl = string.Format("http://m.imdb.com/name/{0}/bio?ref_=m_mn_ov_bio", actor.IMDBActorID);
        html = GetPage(fullBioUrl, "utf-8", out absoluteUri);
        parser.Content = html;

        if (parser.skipToEndOf(" <section id=\"name-bio\">") &&
            parser.skipToEndOf("<p>") &&
            parser.extractTo("</p>", ref value))
        {
          value = new HTMLUtil().ConvertHTMLToAnsi(value);
          value = Utils.stripHTMLtags(value).Trim();
          value = HttpUtility.HtmlDecode(value);
          actor.Biography = value;
        }

        // Kinopoisk Actor trivia
        if (!string.IsNullOrEmpty(kpActor.Trivia))
        {
          actor.Biography = kpActor.Trivia + "\n\n" + actor.Biography;
        }

        // IMDB Awards
        string imdbAwards = GetAwardsIMDB(actor.IMDBActorID);
        if (!string.IsNullOrEmpty(imdbAwards))
        {
          actor.Biography = actor.Biography + "\n\n" + imdbAwards;
        }
        actor.Biography = actor.Biography + "\n\n";
      }

      #endregion

      // Person is movie director or an actor/actress
      bool isActor = false;
      bool isActress = false;
      bool isDirector = false;
      bool isWriter = false;
      bool isSelf = false;

      url.URL = string.Format("http://m.imdb.com/name/{0}/filmotype", actor.IMDBActorID);
      html = GetPage(url.URL, "utf-8", out absoluteUri);

      if (string.IsNullOrEmpty(html))
      {
        return false;
      }

      parser.Content = html;

      #region Check person role in movie (actor, director or writer)

      if (parser.skipToEndOf("filmotype/director"))
      {
        isDirector = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/writer"))
      {
        isWriter = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/actress"))
      {
        isActress = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/actor"))
      {
        isActor = true;
      }

      parser.resetPosition();

      if (parser.skipToEndOf("filmotype/self"))
      {
        isSelf = true;
      }

      #endregion

      parser = null;

      #region Get movies for every role

      // Get filmography Actor
      if (isActor || isActress)
      {
        GetActorMovies(actor, isActor, isActress, false, false, false);
      }

      // Get filmography Actor self
      if (isSelf)
      {
        GetActorMovies(actor, false, false, false, false, true);
      }

      // Get filmography for writers
      if (isWriter)
      {
        GetActorMovies(actor, false, false, false, true, false);
      }

      // Get filmography Director
      if (isDirector)
      {
        GetActorMovies(actor, false, false, true, false, false);
      }

      #endregion

      // Add filmography
      if (actor.Count > 0)
      {
        actor.SortActorMoviesByYear();
      }

      return true;
    }
    catch (Exception ex)
    {
      MediaPortal.GUI.Library.Log.Error("CSScript GetActorDetails({0} exception:{1} {2} {3}", url.URL, ex.Message,
        ex.Source, ex.StackTrace);
    }
    return false;
  }

  private void GetActorMovies(IMDBActor imdbActor, bool actor, bool actress, bool director, bool writer, bool self)
  {
    string movies = string.Empty;
    string actorUrl = string.Empty;
    string actorHtml = string.Empty;
    string uri = string.Empty;

    if (actor) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/actor", imdbActor.IMDBActorID);
    if (actress) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/actress", imdbActor.IMDBActorID);
    if (director) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/director", imdbActor.IMDBActorID);
    if (writer) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/writer", imdbActor.IMDBActorID);
    if (self) actorUrl = string.Format("http://m.imdb.com/name/{0}/filmotype/self", imdbActor.IMDBActorID);

    actorHtml = GetPage(actorUrl, "utf-8", out uri);
    if (string.IsNullOrEmpty(actorHtml)) return;
    HTMLParser parser = new HTMLParser();
    parser.Content = actorHtml;
    // Get films and roles block
    if (!parser.skipToEndOf("<section id=\"name-filmo-content\">"))
    {
      MediaPortal.GUI.Library.Log.Error("GetActorMovies(): HTMLparser content is empty.");
    }
    else
    {
      parser.skipToEndOf("<section id=\"name-filmo-content\">");
      parser.extractTo("</section>", ref movies);
      parser.Content = movies;

      // Parse block for evey film and get year, title and it's imdbID and role
      while (parser.skipToStartOf("<div class=\"col-xs-12"))
      {
        if (parser.skipToEndOf("<a href=\""))
        {
          //HTMLParser movieParser = new HTMLParser(movie);
          string title = string.Empty;
          string strYear = string.Empty;
          string role = string.Empty;
          string imdbID = string.Empty;

          // IMDBid
          parser.skipToEndOf("title/");
          parser.extractTo("/", ref imdbID);

          // Title
          //movieParser.resetPosition();
          parser.skipToEndOf("<span class=\"h3\">");
          parser.extractTo("</span>", ref title);

          title = CleanCrlf(title);

          parser.extractTo("<p", ref strYear);

          if (!string.IsNullOrEmpty(title) && !SkipNoMovies(strYear.Trim(), self))
          {
            // Year
            strYear = Regex.Replace(strYear, "([(]|[)])", string.Empty).Trim();

            if (strYear.Length > 4)
            {
              strYear = Regex.Match(strYear, @"\d{4}").Value; // strYear.Substring(0, 4);
            }

            // Roles actor
            if (!director && !writer && !self)
            {
              if (parser.skipToEndOf("class=\"h4 unbold\">"))
              {
                parser.extractTo("</p>", ref role);
                role = CleanCrlf(role);
              }
            }
            else if (self)
            {
              string sRole = string.Empty;

              if (parser.skipToEndOf("class=\"h4 unbold\">"))
              {
                parser.extractTo("</p>", ref sRole);
                role = CleanCrlf(sRole);
              }
            }  
            else if (director)
            {
              role = GUILocalizeStrings.Get(199).Replace(":", string.Empty);
            }
            else // Writer
            {
              string wRole = string.Empty;

              if (parser.skipToEndOf("class=\"h4 unbold\">"))
              {
                parser.extractTo("</p>", ref wRole);
                wRole = CleanCrlf(wRole);
              }

              if (!string.IsNullOrEmpty(wRole))
              {
                // Remove parentheses (leave text inside)
                wRole = Regex.Replace(wRole, "([(]|[)])", string.Empty);
                role = GUILocalizeStrings.Get(200) + " " + wRole;
              }
              else
              {
                role = GUILocalizeStrings.Get(200).Replace(":", string.Empty);
              }
            }

            int year = 0;
            // Set near future for movies without year (99% it's a future project)
            if (!Int32.TryParse(strYear, out year))
            {
              year = DateTime.Today.Year + 3;
            }

            IMDBActor.IMDBActorMovie actorMovie = new IMDBActor.IMDBActorMovie();
            title = RemoveParenthesis(title).Trim();
            role = RemoveParenthesis(role).Trim();
            actorMovie.MovieTitle = title;
            actorMovie.Role = role;
            actorMovie.Year = year;
            actorMovie.MovieImdbID = imdbID;
            // Check if director/writer/self movie exists in actors movies, append role
            // to already fetched actor movie role(no duplicate movie entries)
            bool skipAdd = false;

            if (writer || director || self)
            {
              for (int i = 0; i < imdbActor.Count; i++)
              {
                if (imdbActor[i].MovieImdbID == imdbID)
                {
                  if (imdbActor[i].Role != string.Empty)
                  {
                    imdbActor[i].Role = role + ", " + imdbActor[i].Role;
                  }
                  else
                  {
                    imdbActor[i].Role = role;
                  }

                  skipAdd = true;
                  break;
                }
              }
            }

            if (!skipAdd)
            {
              imdbActor.Add(actorMovie);
            }
          }
        }
      }
    }
  }

  /// <summary>
  /// Removes HTML tags, cleans \n (to space) and \r (to empty string), decode string and remove last slash char
  /// </summary>
  /// <param name="stringToClean"></param>
  /// <returns></returns>
  private string CleanCrlf(string stringToClean)
  {
    string cleanString = string.Empty;
    cleanString = Utils.stripHTMLtags(stringToClean).Trim();
    cleanString = HttpUtility.HtmlDecode(cleanString.Replace("\n", " ").Replace("\r", string.Empty).Replace("\t", " ").Trim());

    if (!string.IsNullOrEmpty(cleanString) && cleanString.EndsWith("/"))
    {
      cleanString = cleanString.Remove(cleanString.LastIndexOf("/"));
    }
   
    return cleanString;
  }

  private string RemoveParenthesis(string name)
  {
    while (name.IndexOf("(") != -1)
    {
      int start = name.IndexOf("(");
      int end = name.IndexOf(")");
      if (end != -1)
      {
        name = name.Substring(0, start) + name.Substring(end + 1);
      }
      else
      {
        break;
      }
    }

    return name;
  }

  // Clean trash from real movies
  private bool SkipNoMovies(string title, bool isSelf)
  {
    string rxExpression = string.Empty;

    if (isSelf)
    {
      rxExpression =
        @"[(](short|documentary)[)]|video\s(short|game)|tv\s(mini-series|series|short|documentary|special)|documentary\s(short)|[(]short|[(]documentary|\sdocumentary[(](short|documentary)[)]|video\s(short|game)|tv\s(mini-series|series|short|documentary|special)|documentary\s(short)|[(]short|[(]documentary|\sdocumentary|tv\smovie";
    }
    else
    {
      rxExpression =
        @"[(](short|documentary)[)]|video\s(short|game)|tv\s(mini-series|series|short|documentary|special)|documentary\s(short)|[(]short|[(]documentary|\sdocumentary";
    }
    if (Regex.Match(title.Trim(), rxExpression, RegexOptions.IgnoreCase).Success)
    {
      return true;
    }
    return false;
  }

  #endregion

  #region IMDBActorAwards

  private string GetAwardsIMDB(string IMDBID)
  {
    if (string.IsNullOrEmpty(IMDBID))
    {
      return string.Empty;
    }

    try
    {
      string uri = string.Empty;
      string _awardsURL = string.Format("http://www.imdb.com/name/{0}/awards", IMDBID);
      string _awardsPage = GetPage(_awardsURL, "utf-8", out uri);
      if (string.IsNullOrEmpty(_awardsPage))
      {
        return string.Empty;
      }

      string _awardsList = string.Empty;

      string rx_awards_mainblock = @"<h3>(?<award>[^<]+?)<\/h3>[^<]*?<table[^>]+?>(?<block>[\s\S]+?)<\/table>";
      string rx_awards_listWblock = @">(?<awardyear>[^<]+?)<\/a>[^>]+?>[^<]+?<td[^>]+?>[^<]+?<b>(?!Nomin(?:ated|ee))(W(?:on|inner))<\/b(?<block>[\s\S]+?)<\/tr";
      string rx_awards_listNblock = @">(?<awardyear>[^<]+?)<\/a>[^>]+?>[^<]+?<td[^>]+?>[^<]+?<b>(?!W(?:on|inner))(Nomin(?:ated|ee))<\/b(?<block>[\s\S]+?)<\/tr";
      string rx_awards_line = @"award_category.>(?<award>[^<]+?)<[\s\S]+?award_description.>(?<what>[^<]+?)(?:<br.?\/>)?(?<who><[\s\S]+?)<\/td>";
      _awardsPage = HttpUtility.HtmlDecode(_awardsPage);

      ArrayList awardsList = Parse(_awardsPage, rx_awards_mainblock);
      if (awardsList != null && awardsList.Count > 0)
      {
        for (int i = 0; i < awardsList.Count; i++)
        {
          Hashtable awardMain = (Hashtable)awardsList[i];
          string awardMainName = (string)awardMain["award"];
          string awardMainBlock = (string)awardMain["block"];
          awardMainName = awardMainName.Trim().Replace("\n", string.Empty);
          awardMainName = Utils.stripHTMLtags(awardMainName);

          if (!string.IsNullOrEmpty(awardMainBlock))
          {
            _awardsList = _awardsList + "* " + awardMainName + "\n";
            // Winner
            ArrayList awardsWList = Parse(awardMainBlock, rx_awards_listWblock);
            if (awardsWList != null && awardsWList.Count > 0)
            {
              for (int k = 0; k < awardsWList.Count; k++)
              {
                Hashtable awardWMain = (Hashtable)awardsWList[k];
                string awardWMainYear = (string)awardWMain["awardyear"];
                string awardWMainBlock = (string)awardWMain["block"];
                if (!string.IsNullOrEmpty(awardWMainBlock))
                {
                  _awardsList = _awardsList + "Won:\n";
                  ArrayList awardsWListLines = Parse(awardWMainBlock, rx_awards_line);
                  if (awardsWListLines != null && awardsWListLines.Count > 0)
                  {
                    if (!string.IsNullOrEmpty(awardWMainYear))
                    {
                      awardWMainYear = awardWMainYear.Trim().Replace("\n", string.Empty);
                      awardWMainYear = Utils.stripHTMLtags(awardWMainYear);
                      awardWMainYear = Regex.Replace(awardWMainYear, @"[ ]{2,}", " ").Trim();
                      awardWMainYear = " (" + awardWMainYear + ")"; 
                    }
                    else
                    {
                      awardWMainYear = string.Empty;
                    }
                    for (int j = 0; j < awardsWListLines.Count; j++)
                    {
                      Hashtable awardLine = (Hashtable)awardsWListLines[j];
                      string awardLineName = (string)awardLine["award"];
                      string awardLineWho = (string)awardLine["who"];
                      string awardLineWhat = (string)awardLine["what"];
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        awardLineName = awardLineName.Trim().Replace("\n", string.Empty);
                        awardLineName = Utils.stripHTMLtags(awardLineName);
                        awardLineName = Regex.Replace(awardLineName, @"[ ]{2,}", " ").Trim() + awardWMainYear;
                      }
                      else
                      {
                        awardLineName = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWho))
                      {
                        awardLineWho = Regex.Replace(awardLineWho, @"<\/a>[^<]+?<span[^>]+?>\s*\(\d{4}\)\s*<\/span>", " ");
                        awardLineWho = awardLineWho.Trim().Replace("\n", string.Empty).Replace("</a>", ", ");
                        awardLineWho = Utils.stripHTMLtags(awardLineWho);
                        awardLineWho = Regex.Replace(awardLineWho, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWho = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWhat))
                      {
                        awardLineWhat = awardLineWhat.Trim().Replace("\n", string.Empty);
                        awardLineWhat = Utils.stripHTMLtags(awardLineWhat);
                        awardLineWhat = Regex.Replace(awardLineWhat, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWhat = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        _awardsList = _awardsList + "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                        Log.Debug("IMDB Award (W): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat);
                      }
                    }
                  }
                }
              }
            }
            // Nominate
            ArrayList awardsNList = Parse(awardMainBlock, rx_awards_listNblock);
            if (awardsNList != null && awardsNList.Count > 0)
            {
              for (int k = 0; k < awardsNList.Count; k++)
              {
                Hashtable awardNMain = (Hashtable)awardsNList[k];
                string awardNMainYear = (string)awardNMain["awardyear"];
                string awardNMainBlock = (string)awardNMain["block"];
                if (!string.IsNullOrEmpty(awardNMainBlock))
                {
                  _awardsList = _awardsList + "Nominated:\n";
                  ArrayList awardsNListLines = Parse(awardNMainBlock, rx_awards_line);
                  if (awardsNListLines != null && awardsNListLines.Count > 0)
                  {
                    if (!string.IsNullOrEmpty(awardNMainYear))
                    {
                      awardNMainYear = awardNMainYear.Trim().Replace("\n", string.Empty);
                      awardNMainYear = Utils.stripHTMLtags(awardNMainYear);
                      awardNMainYear = Regex.Replace(awardNMainYear, @"[ ]{2,}", " ").Trim();
                      awardNMainYear = " (" + awardNMainYear + ")"; 
                    }
                    else
                    {
                      awardNMainYear = string.Empty;
                    }
                    for (int j = 0; j < awardsNListLines.Count; j++)
                    {
                      Hashtable awardLine = (Hashtable)awardsNListLines[j];
                      string awardLineName = (string)awardLine["award"];
                      string awardLineWho = (string)awardLine["who"];
                      string awardLineWhat = (string)awardLine["what"];
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        awardLineName = awardLineName.Trim().Replace("\n", string.Empty);
                        awardLineName = Utils.stripHTMLtags(awardLineName);
                        awardLineName = Regex.Replace(awardLineName, @"[ ]{2,}", " ").Trim() + awardNMainYear;
                      }
                      else
                      {
                        awardLineName = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWho))
                      {
                        awardLineWho = Regex.Replace(awardLineWho, @"<\/a>[^<]+?<span[^>]+?>\s*\(\d{4}\)\s*<\/span>", " ");
                        awardLineWho = awardLineWho.Trim().Replace("\n", string.Empty).Replace("</a>", ", ");
                        awardLineWho = Utils.stripHTMLtags(awardLineWho);
                        awardLineWho = Regex.Replace(awardLineWho, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWho = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWhat))
                      {
                        awardLineWhat = awardLineWhat.Trim().Replace("\n", string.Empty);
                        awardLineWhat = Utils.stripHTMLtags(awardLineWhat);
                        awardLineWhat = Regex.Replace(awardLineWhat, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWhat = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        _awardsList = _awardsList + "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                        Log.Debug("IMDB Award (N): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      
      if (!string.IsNullOrEmpty(_awardsList))
      {
        return "Awards:\n" + _awardsList;
      }
    }
    catch (Exception ex)
    {
      Log.Debug("IMDB Script GetAwards error: {0}", ex.Message);
    }
    return string.Empty;
  }

  #endregion

  #region IMDBMovieActorsList

  public ArrayList GetIMDBMovieActorsList(string imdbMovieID, bool shortActorsList)
  {
    string absUri = string.Empty;
    ArrayList actorList = new ArrayList();
    string movieURL = string.Format("http://www.imdb.com/title/{0}/combined", imdbMovieID);
    string strBodyActors = GetPage(movieURL, "utf-8", out absUri);

    if (string.IsNullOrEmpty(strBodyActors))
    {
      return actorList;
    }

    // Director
    string strDirectorImdbId = string.Empty;
    string strDirectorName = string.Empty;
    string regexBlockPattern = @"name=.directors?.(?<directors_block>.*?)<h\d";
    string regexPattern = @"<a\s+href=.\/name\/(?<idDirector>nm\d{7})\/.[^>]*>(?<movieDirectors>[^<]+)<\/a>";
    string regexBlock = Regex.Match(HttpUtility.HtmlDecode(strBodyActors),
                        regexBlockPattern, RegexOptions.Singleline).Groups["directors_block"].Value;
    strDirectorImdbId = Regex.Match(regexBlock, regexPattern, RegexOptions.Singleline).Groups["idDirector"].Value;
    strDirectorName = Regex.Match(regexBlock, regexPattern, RegexOptions.Singleline).Groups["movieDirectors"].Value;
    strDirectorName = CleanCrlf(strDirectorName);

    if (!string.IsNullOrEmpty(strDirectorImdbId))
    {
      string strKDirectorName = GetPersonName(strDirectorName);
      if (!string.IsNullOrEmpty(strKDirectorName))
      {
        strDirectorName = strKDirectorName;
      }
      // Add prefix that it's director, will be removed on fetching details
      actorList.Add("*d" + strDirectorName + "|" + strDirectorImdbId + "|" + GUILocalizeStrings.Get(199).Replace(":", string.Empty));
    }

    //Writers
    regexBlockPattern = @"name=.writers?.(?<writers_block>.*?)<h\d";
    regexBlock = Regex.Match(HttpUtility.HtmlDecode(strBodyActors),
                 regexBlockPattern, RegexOptions.Singleline).Groups["writers_block"].Value;

    regexPattern = @"href=.\/name\/(?<imdbWriterId>nm\d{7})\/[^>]*>(?<writer>[^<]+)<\/a>[^(]*(?<wrole>[^)]*\))|href=.\/name\/(?<imdbWriterId>nm\d{7})\/[^>]*>(?<writer>[^<]+)<\/a>(?<wrole>)";
    MatchCollection mc = Regex.Matches(regexBlock, regexPattern);

    if (mc.Count != 0)
    {
      foreach (Match m in mc)
      {
        string writerId = string.Empty;
        writerId = HttpUtility.HtmlDecode(m.Groups["imdbWriterId"].Value.Trim());

        string strWriterName = string.Empty;
        strWriterName = HttpUtility.HtmlDecode(m.Groups["writer"].Value.Trim());
        strWriterName = CleanCrlf(strWriterName).Trim();

        string strKWriterName = GetPersonName(strWriterName);
        if (strKWriterName != string.Empty)
        {
          strWriterName = strKWriterName;
        }

        string writerRole = string.Empty;
        writerRole = HttpUtility.HtmlDecode(m.Groups["wrole"].Value.Trim());
        writerRole = CleanCrlf(writerRole).Trim();

        bool found = false;

        for (int i = 0; i < actorList.Count; i++)
        {
          if (writerId != null)
          {
            if (actorList[i].ToString().Contains(writerId))
            {
              // Check if writer is also director and add new role
              if (!string.IsNullOrEmpty(writerRole))
              {
                actorList[i] = actorList[i] + ", " + GUILocalizeStrings.Get(200) + " " + writerRole.Replace("(", string.Empty).Replace(")", string.Empty);
                found = true;
              }
              else
              {
                actorList[i] = actorList[i] + ", " + GUILocalizeStrings.Get(200).Replace(":", string.Empty);
                found = true;
              }
              break;
            }
          }
        }

        if (!found && writerId != string.Empty)
        {
          if (!string.IsNullOrEmpty(writerRole))
          {
            actorList.Add(strWriterName + "|" + writerId + "|" +
                        GUILocalizeStrings.Get(200) + " " + writerRole.Replace("(", string.Empty).Replace(")", string.Empty));
          }
          else
          {
            actorList.Add(strWriterName + "|" + writerId + "|" +
                        GUILocalizeStrings.Get(200).Replace(":", string.Empty));
          }
        }
      }
    }

    // cast
    regexBlockPattern = @"<table class=.cast(?:_list)?"">.*?<\/table>";
    regexPattern = @"<td[^<]*<a\s+href=.\/name\/(?<imdbActorID>nm\d{7})\/[^>]*?>[\s\S]+?itemprop=.name.>(?<actor>[^<]*)<\/span>[\s\S]+?<td.class=.char(?:acter)?.>(?<role>.+?)<*?<\/td>";
    Match castBlock = Regex.Match(strBodyActors, regexBlockPattern, RegexOptions.Singleline);
    string strCastBlock = HttpUtility.HtmlDecode(castBlock.Value);

    if (strCastBlock != null)
    {
      mc = Regex.Matches(strCastBlock, regexPattern, RegexOptions.Singleline);

      if (mc.Count != 0)
      {
        int actorsCount = 0;

        foreach (Match m in mc)
        {
          string strActorID = string.Empty;
          strActorID = m.Groups["imdbActorID"].Value;
          strActorID = CleanCrlf(strActorID).Trim();

          string strActorName = string.Empty;
          strActorName = m.Groups["actor"].Value;
          strActorName = CleanCrlf(strActorName).Trim();

          string strKActorName = GetPersonName(strActorName);
          if (strKActorName != string.Empty)
          {
            strActorName = strKActorName;
          }
                 
          string strRole = string.Empty;
          strRole = m.Groups["role"].Value;
          strRole = CleanCrlf(Utils.stripHTMLtags(strRole).Trim().Replace("\n", ""));
          strRole = strRole.Replace(",", ";").Replace("  ", "");
          strRole = Regex.Replace(strRole, @"\t|\n|\r", string.Empty).Trim();

          if (!strRole.StartsWith("("))
          {
            string regex = "(\\(.*\\))";
            strRole = Regex.Replace(strRole, regex, "").Trim();
          }
          else
          {
            string regex = "(\\(as.*\\))";
            strRole = Regex.Replace(strRole, regex, "").Trim().
                            Replace("(", string.Empty).
                            Replace(")", string.Empty);
          }

          // Check if we have allready actor as director (actor also is director for movie)
          bool found = false;

          for (int i = 0; i < actorList.Count; i++)
          {
            if (actorList[i].ToString().Contains(strActorID))
            {
              if (strRole != string.Empty)
              {
                actorList[i] = actorList[i] + ", " + strRole;
              }

              found = true;
              break;
            }
          }

          if (!found && strActorID != string.Empty)
          {
            actorList.Add(strActorName + "|" + strActorID + "|" + strRole);
          }

          actorsCount++;

          if (shortActorsList)
          {
            if (actorsCount >= 15)
            {
              return actorList;
            }
          }
        }
      }
    }
    return actorList;
  }

  #endregion

  private ArrayList Parse(string input, string pattern) {
      ArrayList keyedMatches  = new ArrayList();
      try {
          Regex regEx             = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
          MatchCollection matches = regEx.Matches(input);
          
          // write matches and groups to variables
          foreach (Match currMatch in matches) {
              // store the groups in the match
              if (currMatch.Groups.Count > 1) {
                  Hashtable groupings = new Hashtable( );
                  for (int i = 1; i < currMatch.Groups.Count; i++)
                      groupings.Add(regEx.GroupNameFromNumber(i), currMatch.Groups[i].Value.Trim());
                  keyedMatches.Add(groupings);
              }
          }
      }
      catch (Exception e) {
          Log.Error("Regex expression failed! Exception: {0}", e.Message);
          Log.Error(e);
      }
      return keyedMatches;
  }

  private string GetPage(string strUrl, string strEncode, out string absoluteUri)
  {
    // Log.Debug("*** {0}", strUrl);
    string strBody = "";
    absoluteUri = string.Empty;
    Stream receiveStream = null;
    StreamReader sr = null;
    WebResponse result = null;
    try
    {
      // Make the Webrequest
      HttpWebRequest req = (HttpWebRequest)WebRequest.Create(strUrl);

      try
      {
        string uu = "BCYmcFe4PTBQ8nEoIcCgT5AJwPk7BAOCg5XsQrvqKyvxEUpEB6KqjE0Uv_pqnPChVCCnD8vgTK3UtK7FGCdw39E2j-Fb5MWegRLgbNA2rFWeYUJbbXhRyUaxqGuuW3AZb1grBhmGMxhDJyH5ntFDj1X1Ejh_jqR6BaQUk6P16AN1EMPstTSBIqxVW08QEqMKQgsK75y8_s1Ss9tyDfZpLZzCWhO5qftGUn3_bbw_DBF6sTZDo6xK-zy88VZ8cws-D30P";
        string id = "BCYobsJMWRwG55i2yGvVuZe7v5twryi7KSxLglDHw2wVcI1rMq0OjHVT7duPo5NNHKDDVFBTVjJM4PoMonlTB_q9NvMCs-wB78Y1hGjdgCLX0SEEC2Y6BD4E3Z6cIoMwlhTDFSprYlxMqjEsFGYwWzVp1oIUYkZQ0kgpX_MvBrEh-fU";
        string cookieHeader = string.Format("uu={0}; id={1}", uu, id);
        req.Headers.Add("Cookie", cookieHeader);
        // req.Headers.Add("Accept-Language", "en-US,en;q=0.5");
        req.Headers.Add("Accept-Language", "ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.5");
        req.Proxy.Credentials = CredentialCache.DefaultCredentials;
        req.Timeout = 20000;
        req.ReadWriteTimeout  = req.Timeout;
      }
      catch (Exception) { }
      result = req.GetResponse();
      receiveStream = result.GetResponseStream();

      // Encoding: depends on selected page
      Encoding encode = Encoding.GetEncoding(strEncode);
      using (sr = new StreamReader(receiveStream, encode))
      {
        strBody = sr.ReadToEnd();
      }

      absoluteUri = result.ResponseUri.AbsoluteUri;
    }
    catch (Exception ex)
    {
      MediaPortal.GUI.Library.Log.Error("InternalActorsScriptGrabber Error retrieving WebPage: {0} err:{1}", strUrl, ex.Message);
    }
    finally
    {
      if (sr != null)
      {
        try
        {
          sr.Close();
        }
        catch (Exception) { }
      }
      if (receiveStream != null)
      {
        try
        {
          receiveStream.Close();
        }
        catch (Exception) { }
      }
      if (result != null)
      {
        try
        {
          result.Close();
        }
        catch (Exception) { }
      }
    }
    return strBody;
  }

  #region Kinopoisk

  #region Kinopoisk Parameters

  private const string KP_BaseUrl = "https://ext.kinopoisk.ru/ios/5.0.0/";
  private const string KP_ImageUrl = "https://st.kp.yandex.net/images/";
  private const string KP_Agent = "Android client(4.4 / api19), ru.kinopoisk/4.2.0 (55)";
  private const string KP_Android = "19";
  private const string KP_Plex = "2.0.0";

  #endregion Kinopoisk Parameters

  #region Kinopoisk Const

  public const string KP_Search = KP_BaseUrl + "getKPSearchInPeople?keyword=";
  public const string KP_Details = KP_BaseUrl + "getKPPeopleDetailView?peopleID=";
  public const string KP_Awards = KP_BaseUrl + "getKPAwards?peopleID=";

  #endregion Kinopoisk Const

  public struct KPPerson
  {
    public string Id;
    public string Name;
    public string Birthday;
    public string Birthplace;
    public string Sign;
    public string Death;
    public string Deathplace;
    public string Growth;
    public string Sex;
    public string Profession;
    public string Trivia;
    public string Thumb;
  } // EOC

  private static string GetPersonName(string name)
  {
    KPPerson person = GetPersonByName(name);
    if (!string.IsNullOrEmpty(person.Id))
    {
      return person.Name;
    }
    return string.Empty;
  }

  private static KPPerson GetPersonByName(string name, bool bio = false)
  {
    KPPerson person = new KPPerson();

    if (string.IsNullOrEmpty(name))
    {
      return person;
    }

    #region Search People

    string json = string.Empty;
    try
    {
      string sRequest = MakeKinopoiskUrl(KP_Search, name);
      json = GetKinopoiskResponse(sRequest);
    }
    catch
    {
      json = string.Empty;
    }

    if (string.IsNullOrEmpty(json))
    {
      return person;
    }

    // Search
    PeoplesSearch Actors = JsonConvert.DeserializeObject<PeoplesSearch>(json);
    if (Actors != null && Actors.Data != null && Actors.Data.SearchPeople != null && Actors.Data.SearchPeople.Count > 0)
    {
      foreach (SearchPeople people in Actors.Data.SearchPeople)
      {
        if (string.IsNullOrEmpty(people.NameEN) && !string.IsNullOrEmpty(people.NameRU))
        {
          people.NameEN = Translit(people.NameRU);
        }
        if (!string.IsNullOrEmpty(people.NameRU) && people.NameEN.ToUpperInvariant() == name.ToUpperInvariant())
        {
          person.Id = people.Id;
          person.Name = people.NameRU;
          person.Profession = people.Description;
          Log.Debug(":: {0} IMDB Name -> Kinopoisk Name: {1} / {2} - {3}", name, people.NameRU, people.NameEN, strKinopoiskVersion);
          break;
        }
      }
    }

    #endregion

    if (!bio)
    {
      return person;
    }

    #region Details for People

    json = string.Empty;
    try
    {
      string sRequest = MakeKinopoiskUrl(KP_Details, person.Id);
      json = GetKinopoiskResponse(sRequest);
    }
    catch
    {
      json = string.Empty;
    }

    if (string.IsNullOrEmpty(json))
    {
      return person;
    }

    // Details
    DetailsOfPeople Actor = JsonConvert.DeserializeObject<DetailsOfPeople>(json);
    if (Actor != null && Actor.Data != null && Actor.Data != null)
    {
      if (!string.IsNullOrEmpty(Actor.Data.NameRU))
      {
        person.Sign = GetHoroSign(Actor.Data.Birthday);
        person.Birthday = Actor.Data.Birthday;
        person.Birthplace = Actor.Data.Birthplace;
        person.Death = Actor.Data.Death;
        person.Deathplace = Actor.Data.Deathplace;
        person.Growth = (Actor.Data.Growth > 0 ? string.Format("{0:0.00}", (Actor.Data.Growth*1.0/100.0)) : string.Empty);
        person.Sex = (Actor.Data.Sex == "male" ? "Мужчина" : "Женщина");
        person.Profession = Actor.Data.Profession;
        person.Trivia = string.Empty;
        person.Thumb = GetKPImageURL(Actor.Data.PosterURL);

        if (Actor.Data.Trivia != null)
        {
          foreach (string trivia in Actor.Data.Trivia)
          {
            person.Trivia = person.Trivia + "- " + trivia + "\n";
          }
        }

        if (Actor.Data.HasAwards > 0)
        {
          person.Trivia = person.Trivia + "\n" + GetKinopoiskAwards(person.Id);
        }
      }
    }

    #endregion

    return person;
  }

  public static string GetKinopoiskAwards(string url)
  {
    if (string.IsNullOrEmpty(url))
    {
      return string.Empty;
    }

    string json = string.Empty;
    try
    {
      string sRequest = MakeKinopoiskUrl(KP_Awards, url);
      json = GetKinopoiskResponse(sRequest);
    }
    catch
    {
      json = string.Empty;
    }

    if (string.IsNullOrEmpty(json))
    {
      return string.Empty;
    }

    try
    {
      AwardsData AwardsData = JsonConvert.DeserializeObject<AwardsData>(json);
      if (AwardsData == null || AwardsData.Data == null || AwardsData.Data.Awards == null || AwardsData.Data.Awards.Count <= 0)
      {
        return string.Empty;
      }
      string _awardsList = "Награды:\n"; 
      foreach (object award in AwardsData.Data.Awards)
      {
        string awardname = string.Empty;
        string awardline = award.ToString();
        string pattern = @"({[^""]+?"")([^""]+?)("":\s\[)";

        Match match = Regex.Match(awardline, pattern, RegexOptions.IgnoreCase);
        if (match.Success)
        {
          awardname = match.Groups[2].Value;
          awardline = Regex.Replace(awardline, pattern, "$1awards$3");

          Award kp_award = JsonConvert.DeserializeObject<Award>(awardline);
          if (kp_award != null && kp_award.Awards != null && kp_award.Awards.Count > 0)
          {
            string strWon = string.Empty;
            string strNom = string.Empty;

            _awardsList = _awardsList + awardname + "\n"; 

            foreach (AwardData awarddata in kp_award.Awards)
            {
              if (awarddata.IsNomination == 0)
              {
                strWon = strWon + "- " + awarddata.Title + (!string.IsNullOrEmpty(awarddata.SubTitle) ? " - " + awarddata.SubTitle : string.Empty) + "\n";
                Log.Debug("Award (W): {0} - {1} {2}", awardname, awarddata.Title, awarddata.SubTitle);
              }
              else
              {
                strNom = strNom + "- " + awarddata.Title + (!string.IsNullOrEmpty(awarddata.SubTitle) ? " - " + awarddata.SubTitle : string.Empty) + "\n";
                Log.Debug("Award (N): {0} - {1} {2}", awardname, awarddata.Title, awarddata.SubTitle);
              }
            }

            if (!string.IsNullOrEmpty(strWon))
            {
              _awardsList = _awardsList + "Победитель:\n" + strWon;
            }
            if (!string.IsNullOrEmpty(strNom))
            {
              _awardsList = _awardsList + "Номинации:\n" + strNom;
            }
          }
        }
      }
      return _awardsList;
    }
    catch { }

    return string.Empty;
  }

  private static string GetHoroSign(string sDate)
  {
    if (string.IsNullOrEmpty(sDate))
    {
      return string.Empty;
    }

    DateTime dt;
    if (!DateTime.TryParseExact(sDate, "dd.MM.yyyy", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out dt))
    {
      return string.Empty;
    }

    int month = dt.Month;
    int day = dt.Day;
    switch (month)
    {
      case 1:
        if (day <= 19)
          return "Козерог";
        else
          return "Водолей";
      case 2:
        if (day <= 18)
          return "Водолей";
        else
          return "Рыбы";
      case 3:
        if (day <= 20)
          return "Рыбы";
        else
          return "Овен";
      case 4:
        if (day <= 19)
          return "Овен";
        else
          return "Телец";
      case 5:
        if (day <= 20)
          return "Телец";
        else
          return "Близнецы";
      case 6:
        if (day <= 20)
          return "Близнецы";
        else
          return "Рак";
      case 7:
        if (day <= 22)
          return "Рак";
        else
          return "Лев";
      case 8:
        if (day <= 22)
          return "Лев";
        else
          return "Дева";
      case 9:
        if (day <= 22)
          return "Дева";
        else
          return "Весы";
      case 10:
        if (day <= 22)
          return "Весы";
        else
          return "Скорпион";
      case 11:
        if (day <= 21)
          return "Скорпион";
        else
          return "Стрелец";
      case 12:
        if (day <= 21)
          return "Стрелец";
        else
          return "Козерог";
    }
    return string.Empty;
  }

  private static string MakeKinopoiskUrl(string method, string query)
  {
    return method + Uri.EscapeDataString(query);
  }

  private static string GetKinopoiskResponse(string url)
  {
    string plexurl = "http://plex.filmingdata.com/reqh";
    string plexxs = string.Empty;
    string plexxt = string.Empty;

    System.Net.HttpWebRequest webRequest;
    try
    {
      webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(plexurl);
      webRequest.Headers.Clear();
      webRequest.Timeout = 5000;
      webRequest.Method = System.Net.WebRequestMethods.Http.Head;

      webRequest.Headers.Add("Pragma", "no-cache");
      webRequest.Headers.Add("Cache-Control", "no-cache");

      webRequest.Headers.Add("X-Kinopoisk-Url", url);
      webRequest.Headers.Add("X-Server-ID", KP_Plex);
      using (System.Net.WebResponse webResponse = webRequest.GetResponse())
      {
        plexxs = webResponse.Headers["x-signature"];
        plexxt = webResponse.Headers["x-timestamp"];
        webResponse.Close();
      }
    }
    catch
    {
      plexxs = string.Empty;
      plexxt = string.Empty;
    }
    finally
    {
      webRequest = null;
    }

    if (string.IsNullOrEmpty(plexxs) || string.IsNullOrEmpty(plexxt))
    {
      return string.Empty;
    }

    // Log.Debug("GetKinopoiskResponse: {0}", url);
    string sReturn = string.Empty;
    System.Net.HttpWebRequest oHttpWebRequest;
    try
    {
      oHttpWebRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);
      oHttpWebRequest.Headers.Clear();
      oHttpWebRequest.Timeout = 5000;
      oHttpWebRequest.Method = System.Net.WebRequestMethods.Http.Get;

      oHttpWebRequest.Accept = "application/json";
      oHttpWebRequest.UserAgent = KP_Agent;

      oHttpWebRequest.Headers.Add("device", "android");
      oHttpWebRequest.Headers.Add("Android-Api-Version", KP_Android);

      string cd = DateTime.Now.ToString("HH:mm dd.MM.yyyy");
      oHttpWebRequest.Headers.Add("clientDate", cd);

      oHttpWebRequest.Headers.Add("X-SIGNATURE", plexxs);
      oHttpWebRequest.Headers.Add("X-TIMESTAMP", plexxt);

      System.Net.HttpWebResponse oResponse = (System.Net.HttpWebResponse)oHttpWebRequest.GetResponse();

      using (System.IO.StreamReader sr = new System.IO.StreamReader(oResponse.GetResponseStream()))
      {
        sReturn = sr.ReadToEnd();
      }
      oResponse.Close();
    }
    catch (Exception ex)
    { 
      Log.Debug("GetKinopoiskResponse: error {0}", ex.Message);
    }
    finally
    {
      oHttpWebRequest = null;
    }
    // Log.Debug("GetKinopoiskResponse: {0}", sReturn);
    return sReturn;
  }

  private static string GetKPImageURL(string url)
  {
    if (string.IsNullOrEmpty(url))
    {
      return string.Empty;
    }
    url = KP_ImageUrl + url;

    string resultUrl = string.Empty;
    System.Net.HttpWebRequest webRequest;
    try
    {
      webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);
      webRequest.Headers.Clear();
      webRequest.Timeout = 5000;
      webRequest.Method = System.Net.WebRequestMethods.Http.Head;

      webRequest.Headers.Add("Pragma", "no-cache");
      webRequest.Headers.Add("Cache-Control", "no-cache");

      using (System.Net.WebResponse webResponse = webRequest.GetResponse())
      {
        resultUrl = webResponse.ResponseUri.ToString();
        webResponse.Close();
      }
    }
    catch 
    { 
      resultUrl = string.Empty;
    }
    finally
    {
      webRequest = null;
    }

    if (!string.IsNullOrEmpty(resultUrl))
    {
      if (resultUrl.IndexOf("no-poster") > -1)
      {
        resultUrl = string.Empty;
      }
    }
    return resultUrl;
  }

  #region Kinopoisk Classes

  public class SearchPeople
  {
    [JsonProperty("id")]
    public string Id { get; set; }

    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("nameRU")]
    public string NameRU { get; set; }

    [JsonProperty("nameEN")]
    public string NameEN { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("posterURL")]
    public string PosterURL { get; set; }
  }

  public class PeoplesSearchData
  {
    [JsonProperty("class")]
    public string Class { get; set; }

    [JsonProperty("keyword")]
    public string Keyword { get; set; }

    [JsonProperty("pagesCount")]
    public int PagesCount { get; set; }

    [JsonProperty("searchPeople")]
    public List<SearchPeople> SearchPeople { get; set; }

    [JsonProperty("searchPeoplesCountResult")]
    public int SearchPeoplesCountResult { get; set; }
  }

  public class PeoplesSearch
  {
    [JsonProperty("resultCode")]
    public int ResultCode { get; set; }

    [JsonProperty("message")]
    public string Message { get; set; }

    [JsonProperty("data")]
    public PeoplesSearchData Data { get; set; }

    [JsonProperty("no_cache_flag")]
    public bool no_cache_flag { get; set; }
  }

  public class PeopleData
  {
    [JsonProperty("class")]
    public string Class { get; set; }

    [JsonProperty("peopleID")]
    public string PeopleID { get; set; }

    [JsonProperty("webURL")]
    public string WebURL { get; set; }

    [JsonProperty("nameRU")]
    public string NameRU { get; set; }

    [JsonProperty("nameEN")]
    public string NameEN { get; set; }

    [JsonProperty("sex")]
    public string Sex { get; set; }

    [JsonProperty("posterURL")]
    public string PosterURL { get; set; }

    [JsonProperty("growth")]
    public int Growth { get; set; }

    [JsonProperty("birthday")]
    public string Birthday { get; set; }

    [JsonProperty("death")]
    public string Death { get; set; }

    [JsonProperty("age")]
    public string Age { get; set; }

    [JsonProperty("birthplace")]
    public string Birthplace { get; set; }

    [JsonProperty("deathplace")]
    public string Deathplace { get; set; }

    [JsonProperty("hasAwards")]
    public int HasAwards { get; set; }

    [JsonProperty("profession")]
    public string Profession { get; set; }

    [JsonProperty("triviaData")]
    public List<string> Trivia { get; set; }
  }

  public class DetailsOfPeople
  {
    [JsonProperty("resultCode")]
    public int resultCode { get; set; }

    [JsonProperty("message")]
    public string message { get; set; }

    [JsonProperty("data")]
    public PeopleData Data { get; set; }

    [JsonProperty("no_cache_flag")]
    public bool no_cache_flag { get; set; }
  }

  public class AwardsData
  {
    [JsonProperty("resultCode")]
    public int ResultCode { get; set; }

    [JsonProperty("message")]
    public string Message { get; set; }

    [JsonProperty("data")]
    public AwardsLine Data { get; set; }
  }

  public class AwardsLine
  {
    [JsonProperty("class")]
    public string Class { get; set; }

    [JsonProperty("items")]
    public List<object> Awards { get; set; }
  }

  public class Award
  {
    [JsonProperty("awards")]
    public List<AwardData> Awards { get; set; }
  }

  public class AwardData
  {
    [JsonProperty("title")]
    public string Title { get; set; }

    [JsonProperty("image")]
    public string Image { get; set; }

    [JsonProperty("subTitle")]
    public string SubTitle { get; set; }

    [JsonProperty("peopleID")]
    public string PeopleId { get; set; }

    [JsonProperty("isNomination")]
    public int IsNomination { get; set; }
  }

  #endregion

  #region Translit

  private static string Translit(string strValue)
  {
      return strValue.
// Малые
        Replace("а","a").
        Replace("б","b").
        Replace("в","v").
        Replace("г","g").
        Replace("д","d").
        Replace("е","e").
//               Replace("ё","e").
        Replace("ё","yo").
        Replace("ж","zh").
        Replace("з","z").
        Replace("и","i").
        Replace("й","y").
        Replace("к","k").
        Replace("л","l").
        Replace("м","m").
        Replace("н","n").
        Replace("о","o").
        Replace("п","p").
        Replace("р","r").
        Replace("с","s").
        Replace("т","t").
        Replace("у","u").
        Replace("ф","f").
//               Replace("х","h").
        Replace("х","kh").
        Replace("ц","ts").
        Replace("ч","ch").
        Replace("ш","sh").
        Replace("щ","shch").
        Replace("ь","").
        Replace("ъ","'").
        Replace("ы","y").
        Replace("э","e").
        Replace("ю","yu").
        Replace("я","ya").
// Большие
        Replace("А","A").
        Replace("Б","B").
        Replace("В","V").
        Replace("Г","G").
        Replace("Д","D").
        Replace("Е","E").
//               Replace("Ё","E").
        Replace("Ё","Yo").
        Replace("Ж","Zh").
        Replace("З","Z").
        Replace("И","I").
        Replace("Й","Y").
        Replace("К","K").
        Replace("Л","L").
        Replace("М","M").
        Replace("Н","N").
        Replace("О","O").
        Replace("П","P").
        Replace("Р","R").
        Replace("С","S").
        Replace("Т","T").
        Replace("У","U").
        Replace("Ф","F").
//               Replace("Х","H").
        Replace("Х","Kh").
        Replace("Ц","Ts").
        Replace("Ч","Ch").
        Replace("Ш","Sh"). 
        Replace("Щ","Shch").
        Replace("Ь","").
        Replace("Ъ","'").
        Replace("Ы","Y").
        Replace("Э","E").
        Replace("Ю","Yu").
        Replace("Я","Ya").
// Украинские
        Replace("і","i").
        Replace("ї","i").
        Replace("є","ie").
        Replace("ґ","g'").
        Replace("І","I").
        Replace("Ї","Yi").
        Replace("Є","Ye").
        Replace("Ґ","G'");
  }

  #endregion

  #endregion
}
