//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";
//css_reference "Newtonsoft.Json.dll";

using MediaPortal.GUI.Library;
using MediaPortal.Util;
using MediaPortal.Video.Database;

using Newtonsoft.Json;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;

// Change to Grabber, this for avoid to load by mediaportal
internal class Grabber : MarshalByRefObject, MediaPortal.Video.Database.IIMDBScriptGrabber
{
  const string strGrabber = "KTI_MDB";
  const string strGrabberVersion = "20180323.I by ajs";
  const string strGrabberName = "KP/TMDB/IMDB Grabber v" + strGrabberVersion; 

  public Grabber()
  {
  }

  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetName()
  {
    return strGrabberName; 
  }

  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetLanguage()
  {
    return API_LANG;
  }

  void MediaPortal.Video.Database.IIMDBScriptGrabber.FindFilm(string strSearch, int iLimit, ArrayList elements)
  {
    Log.Info("{0} Version: {1}", strGrabber, strGrabberVersion);
    Log.Debug("{0} Search start [{1}]: {2}", strGrabber, iLimit, strSearch);

    try
    {
      GrabberUrl[] tUrl = GetKinopoiskTitles(strSearch, iLimit);
      foreach (GrabberUrl aUrl in tUrl)
      {
        // Log.Debug("{0}:{1} Found: [{2}] {3} - {4} {5}", strGrabber, aUrl.grabber, aUrl.url, aUrl.title, aUrl.tmdbid, aUrl.imdbid);

        MediaPortal.Video.Database.IMDB.IMDBUrl url = new MediaPortal.Video.Database.IMDB.IMDBUrl(aUrl.url, aUrl.title, strGrabber);
        elements.Add(url);
      }
    }
    catch (Exception ex)
    {
      Log.Error("{0} Exception for lookup of {1} err:{2} stack:{3}", strGrabber, strSearch, ex.Message, ex.StackTrace);
    }

    #region SOS Mode

    if (elements.Count == 0 && GRABBER_SOS)
    {
      try
      {
        GrabberUrl[] tUrl = GetTMDBTitles(strSearch);
        foreach (GrabberUrl aUrl in tUrl)
        {
          // Log.Debug("{0}:{1} SOS Found: [{2}] {3}", strGrabber, aUrl.grabber, aUrl.url, aUrl.title);

          MediaPortal.Video.Database.IMDB.IMDBUrl url = new MediaPortal.Video.Database.IMDB.IMDBUrl("SOS" + aUrl.url, aUrl.title, strGrabber);
          elements.Add(url);

          if (elements.Count >= iLimit)
          {
            break;
          }
        }
      }
      catch (Exception ex)
      {
        Log.Error("{0} Exception for lookup of {1} err:{2} stack:{3}", strGrabber, strSearch, ex.Message, ex.StackTrace);
      }
    }

    #endregion

    Log.Debug("{0} Search ended. {1} found: {2}", strGrabber, strSearch, elements.Count);
  }

  bool MediaPortal.Video.Database.IIMDBScriptGrabber.GetDetails(IMDB.IMDBUrl url, ref IMDBMovie movieDetails)
  {
    bool sosMode = url.URL.IndexOf("SOS") > -1;

    Log.Debug("{0} Start Get info by URL {1}", strGrabber, HideAPIKey(url.URL));
    try
    {
      movieDetails.Reset();
      movieDetails.Database = strGrabber;

      GrabberMovie adetails;

      if (!sosMode)
      {
        string rx_movie_id = @"(?<movieID>[0-9]+)(?<imdbID>(tt\d{7})?)";
        string movieID = ParseSingleValue(url.URL, rx_movie_id, "movieID", true);

        adetails = GetKinopoiskDetails(movieID);

        // MP1-4761: Kinopoisk ID
        movieDetails.LocalDBNumber = "KP" + adetails.ID.ToString();
        // IMDB MovieID
        adetails.IMDBNumber = ParseSingleValue(url.URL, rx_movie_id, "imdbID", true);
      }
      else
      {
        // Get Details Cast and Crew in TMDB
        url.URL = url.URL.Substring(3);

        adetails = GetTMDBDetails(url.URL);
        GetTMDBCast(ref adetails);
        GetTMDBRelease(ref adetails);

        // MP1-4761: TMDB MovieID
        movieDetails.TMDBNumber = adetails.ID.ToString();
      }

      // Kinopoisk or TMDB(SOS) Fill movieDetails
      PopulateMovieDetails(ref movieDetails, adetails); 

      // TMDB Fill movieDetails
      if (!sosMode && !string.IsNullOrEmpty(adetails.IMDBNumber))
      {
        adetails = GetTMDBDetails(adetails.IMDBNumber);
        GetTMDBCast(ref adetails);
        GetTMDBRelease(ref adetails);

        PopulateMovieDetails(ref movieDetails, adetails);

        // MP1-4761: TMDB MovieID
        movieDetails.TMDBNumber = adetails.ID.ToString();

        // Replace Kinopoisk Fanart with TMDB Fanart
        if (!string.IsNullOrEmpty(adetails.FanartURL))
        {
          movieDetails.FanartURL = adetails.FanartURL;
        }
      }

      // IMDB Fill movieDetails
      GetIMDBDetails(ref movieDetails);

      // Tagline on EN from TMDB
      if (sosMode)
      {
        if (API_LANG != "EN" && string.IsNullOrEmpty(movieDetails.TagLine))
        {
          string enURL = url.URL.Replace("language="+API_LANG_URL, "language=en");
          GrabberMovie tdetails = GetTMDBDetails(enURL);
          movieDetails.TagLine = tdetails.TagLine;
        }
      }

      // MePo stuff
      if (string.IsNullOrEmpty(movieDetails.PlotOutline))
      {
        movieDetails.PlotOutline = movieDetails.Plot;
      }

      if (movieDetails.Rating > 10.0f)
      {
        movieDetails.Rating /= 10.0f;
      }

      if (string.IsNullOrEmpty(movieDetails.TagLine))
      {
        movieDetails.TagLine = "-";
      }

      if (string.IsNullOrEmpty(movieDetails.MPARating))
      {
        movieDetails.MPARating = "NR";
      }

      // MP1-4761: Collection cover and backdrop download 
      if (!string.IsNullOrEmpty(adetails.CollectionCover))
      {
        IMDBFetcher.DownloadCoverArt(Thumbs.MovieCollection, adetails.CollectionCover, adetails.Collection);
      }
      if (!string.IsNullOrEmpty(adetails.CollectionBackdrop))
      {
        string fanartFilename = FanArt.SetFanArtFileName(adetails.Collection, 0);
        if (!string.IsNullOrEmpty(fanartFilename) && !File.Exists(fanartFilename))
        {
          MediaPortal.Util.Utils.DownLoadImage(adetails.CollectionBackdrop, fanartFilename);
        }
      }

      Log.Info("{0} Get info for {1} succeded.", strGrabber, movieDetails.Title);
      return true;
    }
    catch (Exception ex)
    {
      Log.Error("{0} Get info for {1} failed: {2}", strGrabber, HideAPIKey(url.URL), ex.Message);
    }
    return false;
  }

  private static void PopulateMovieDetails(ref IMDBMovie movieDetails, GrabberMovie details)
  {
    bool isEmpty = movieDetails.IsEmpty;

    // Actors as Role
    string sActors = string.Empty;
    if (GRABBER_GET_ACTORS && details.Cast != null)
    {
      foreach (Grabber.GrabberPerson apers in details.Cast)
      {
        sActors += apers.Name + " as " + apers.As + "\n";
      }
    }

    // Directors and Writers
    string sDirector = string.Empty;
    string sWriters = string.Empty;
    if (details.Crew != null)
    {
      foreach (Grabber.GrabberPerson apers in details.Crew)
      {
        if (!string.IsNullOrEmpty(apers.Name))
        {
          if (apers.As.ToLowerInvariant().Contains("direct"))
          {
            sDirector += (!string.IsNullOrEmpty(sDirector) ? " / " : string.Empty) + apers.Name; // + " (" + apers.As + ")";
          }
          else if (apers.As.ToLowerInvariant().Contains("writ"))
          {
            sWriters += (!string.IsNullOrEmpty(sWriters) ? " / " : string.Empty) + apers.Name; // + " (" + apers.As + ")";
          }
        }
      }
      sDirector = sDirector.Replace("...", string.Empty).Trim();
      sWriters = sWriters.Replace("...", string.Empty).Trim();
    }

    // Plot
    if (!string.IsNullOrEmpty(details.Plot))
    {
      details.Plot = details.Plot.Replace("...", string.Empty).Trim();
    }

    // Fill movieDetails
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Title))
      movieDetails.Title = details.Title;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.IMDBNumber))
      movieDetails.IMDBNumber = details.IMDBNumber;
    if (isEmpty || movieDetails.Year == 0 || movieDetails.Year == 1990)
      movieDetails.Year = details.Year;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Language))
      movieDetails.Language = details.Language;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Plot))
      movieDetails.Plot = details.Plot;
    if (isEmpty || movieDetails.Rating == 0.0f)
      movieDetails.Rating = details.Rating;
    if (isEmpty || movieDetails.RunTime == 0)
      movieDetails.RunTime = details.RunTime;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.TagLine))
      movieDetails.TagLine = details.TagLine;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Studios))
      movieDetails.Studios = details.Studios;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Country))
      movieDetails.Country = details.Country;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Genre))
      movieDetails.Genre = details.Genre;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Cast))
      movieDetails.Cast = sActors;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Director))
      movieDetails.Director = sDirector;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.WritingCredits))
      movieDetails.WritingCredits = sWriters;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.MPARating))
      movieDetails.MPARating = details.MPAARating;
    if (isEmpty || movieDetails.Duration == 0)
      movieDetails.Duration = movieDetails.RunTime;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.Votes))
      movieDetails.Votes = details.Votes.ToString();
    if (isEmpty || string.IsNullOrEmpty(movieDetails.ThumbURL))
      movieDetails.ThumbURL = details.ThumbURL;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.FanartURL))
      movieDetails.FanartURL = details.FanartURL;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.MovieCollection))
      movieDetails.MovieCollection = details.Collection;  // MP1-4761
    if (isEmpty || string.IsNullOrEmpty(movieDetails.SingleUserGroup))
      movieDetails.SingleUserGroup = details.UserGroups;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.MovieAwards))
      movieDetails.MovieAwards = details.Awards;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.MPAAText))
      movieDetails.MPAAText = details.MPAAText;
    if (isEmpty || string.IsNullOrEmpty(movieDetails.UserReview))
      movieDetails.UserReview = details.Trivia;
  }

  #region GRABBER Title

  public const string TITLE_MASK = "{0}{1}{2}";                      // {0} - Title {1} - Separator {2} - Original Title
  public const string TITLE_SEARCH_MASK = "{0}{1}{2} ({3})";         // {0} - Title {1} - Separator {2} - Original Title {3} - Year
  public const string TITLE_IMDB_MASK = "{0} IMDB: {1} ({2}) - {3}"; // {0} - Title {1} - IMDB Title {2} - IMDB Year {3} - IMDB Id
  public const string TITLE_SEPARATOR = " / ";

  #endregion GRABBER Title

  #region GRABBER Parameters

  public const bool GRABBER_SOS = false;                           // If Kinopoisk search not Work, switch to TMDB
  public const bool GRABBER_ID_LOOKUP = true;                      // Try IMDB, TMDB LookUp by ID
  public const int GRABBER_IMDB_LOOKUP = 3;                        // Maximum IMDB Movie search retrive, 0 - Disable IMDBID Search
  public const int GRABBER_ACC_YEAR = 1;                           // Year accuracy check - checks in searchstring for (year number) or [year number]
  public const bool GRABBER_GET_ACTORS = false;                    // Fill Actors lists to MovieDetails or not
  public const bool GRABBER_RU_RATING = true;                      // Kinopoisk movie rating or IMDB - Kinopoisk part Only!
  public const bool GRABBER_RU_MPAARATING = false;                 // MPAA Rating from Kinopoisk or IMDB - Kinopoisk part Only! TMDB, IMDB - Local, US, UK ...
  public const bool GRABBER_ADD_IMDBAWARDS = true;                 // Add IMDB Awards bottom to Kinopoisk Awards

  public const bool GRABBER_ADDTOUSERGROUP = true;                 // Add movies to User groups
  public const string GRABBER_OurGroup = "Наши фильмы";            // Groups for Our films
  public const string GRABBER_ForeignGroup = "Иностранные фильмы"; // Groups for Foreign films

  public const bool GRABBER_ADDTRIVIAASREVIEW = true;              // Add IMDB Trivia as UserReview, if Trivia empty -> IMDB UserReview

  #endregion GRABBER Parameters

  #region TMDB Parameters

  public const string API_KEY = "e224fe4f3fec5f7b5570641f7cd3df3a"; // Inset API Key
  public static string API_LANG = CultureInfo.CurrentCulture.TwoLetterISOLanguageName.ToUpperInvariant();
  public static string API_LANG_URL = CultureInfo.CurrentCulture.TwoLetterISOLanguageName.ToLowerInvariant();

  private const string API_BaseUrl = "http://api.themoviedb.org/3/";
  private const string API_ImageUrl = "http://image.tmdb.org/t/p/";
  private const string API_PosterUrl = API_ImageUrl + "w780";
  private const string API_FanartUrl = API_ImageUrl + "original";

  #endregion TMDB Parameters

  #region TMDB Const

  public const string API_Configuration = API_BaseUrl + "configuration";
  public const string API_SearchMovie = API_BaseUrl + "search/movie";
  public const string API_SearchPerson = API_BaseUrl + "search/person";
  public const string API_MovieInfo = API_BaseUrl + "movie/{0}";
  public const string API_AlternateTitles = API_BaseUrl + "movie/{0}/alternative_titles";
  public const string API_Casts = API_BaseUrl + "movie/{0}/casts";
  public const string API_Trailers = API_BaseUrl + "movie/{0}/trailers";
  public const string API_ReleaseInfo = API_BaseUrl + "movie/{0}/releases";
  public const string API_MovieImages = API_BaseUrl + "movie/{0}/images";
  public const string API_PersonInfo = API_BaseUrl + "person/{0}";
  public const string API_PersonCredits = API_BaseUrl + "person/{0}/credits";
  public const string API_PersonImages = API_BaseUrl + "person/{0}/images";
  public const string API_LatestMovie = API_BaseUrl + "latest/movie";
  public const string API_Keywords = API_BaseUrl + "movie/{0}/keywords";
  public const string API_Translations = API_BaseUrl + "movie/{0}/translations";
  public const string API_Collection = API_BaseUrl + "collection/{0}";

  #endregion TMDB Const

  #region Kinopoisk Parameters

  private const string KP_BaseUrl = "https://ext.kinopoisk.ru/ios/5.0.0/";
  private const string KP_ImageUrl = "https://st.kp.yandex.net/images/";
  private const string KP_Agent = "Android client(4.4 / api19), ru.kinopoisk/4.2.0 (55)";
  private const string KP_Android = "19";
  private const string KP_Plex = "2.0.0";

  #endregion Kinopoisk Parameters

  #region Kinopoisk Const

  public const string KP_Search = KP_BaseUrl + "getKPSearchInFilms?keyword=";
  public const string KP_Details = KP_BaseUrl + "getKPFilmDetailView?filmID=";
  public const string KP_Awards = KP_BaseUrl + "getKPAwards?filmID=";
  public const string KP_Actors = KP_BaseUrl + "getStaffList?filmID=";

  #endregion Kinopoisk Const

  #region IMDB Parameters

  private const string IMDB_BaseUrl = "http://www.imdb.com/title/{0}/";
  private const string IMDB_BaseMobUrl = "http://m.imdb.com/title/{0}/";

  #endregion IMDB Parameters

  #region IMDB Const

  public const string IMDB_Awards = IMDB_BaseUrl + "awards";
  public const string IMDB_Parents = IMDB_BaseUrl + "parentalguide";
  public const string IMDB_Trivia = IMDB_BaseUrl + "trivia";
  public const string IMDB_Review = IMDB_BaseUrl + "reviews";
  public const string IMDB_Ratings = IMDB_BaseUrl + "ratings";

  #endregion IMDB Const

  #region TMDB Methods

  public static GrabberUrl[] GetTMDBTitles(string title)
  {
    Log.Debug("{0} TMDB Search movie {1} started...", strGrabber, title);
    List<GrabberUrl> tReturn = new List<GrabberUrl>();

    string searchStr = API_LANG == "RU" ? title.Replace("Ё", "Е").Replace("ё", "е") : title;
    string imdbMovieID = string.Empty;
    string tmdbMovieID = string.Empty;

    if (GRABBER_ID_LOOKUP)
    {
      // Get IMDB ID from search string
      // Regex rximdbid = new Regex(@"(?:\s|\+|^)(?<imdbid>tt\d{7})\b");
      // Match matchimdbid = rximdbid.Match(searchStr);
      // if (matchimdbid.Success)
      string rx_pattern = @"(?:\s|\+|^)(?<imdbid>tt\d{7})\b";
      imdbMovieID = ParseSingleValue(searchStr, rx_pattern, "imdbid", true);
      if (!string.IsNullOrEmpty(imdbMovieID))
      {
        // Get IMDBID
        // imdbMovieID = matchimdbid.Groups["imdbid"].Value;
        Log.Debug("{0} TMDB IMDBID: Found {1}", strGrabber, imdbMovieID);
      }
      // Get TMDB ID from search string
      // rximdbid = new Regex(@"-[\s\+]TMDB(?<tmdbid>\d{1,})\b");
      // matchimdbid = rximdbid.Match(searchStr);
      // if (matchimdbid.Success)
      rx_pattern = @"-[\s\+]TMDB(?<tmdbid>\d{1,})\b";
      tmdbMovieID = ParseSingleValue(searchStr, rx_pattern, "tmdbid", true);
      if (!string.IsNullOrEmpty(tmdbMovieID))
      {
        // Get TMDB
        // tmdbMovieID = matchimdbid.Groups["tmdbid"].Value;
        Log.Debug("{0} TMDB TMDBID: Found {0}", strGrabber, tmdbMovieID);
      }
    }

    if (!string.IsNullOrWhiteSpace(imdbMovieID) || !string.IsNullOrWhiteSpace(tmdbMovieID))
    {
      try
      {
        string urlID = !string.IsNullOrWhiteSpace(tmdbMovieID) ? tmdbMovieID : imdbMovieID;
        GrabberMovie aMovie = GetTMDBDetails(urlID);
        if (aMovie.ID > 0)
        {
          GrabberUrl aUrl = new GrabberUrl(urlID, aMovie.Title, strGrabber + "_" + API_LANG);
          tReturn.Add(aUrl);
          return tReturn.ToArray();
        }
      }
      catch { }
    }

    int year = 0;
    // Get Year from search string
    string rx_year = @"^(.*)?[\[\(](?<year>19\d{2}|20\d{2})[\]\)]";
    string s_year = ParseSingleValue(searchStr, rx_year, "year", true);
    if (!string.IsNullOrEmpty(s_year))
    {
      if (Int32.TryParse(s_year, out year))
      {
        searchStr = Regex.Replace(searchStr, @"\+?[\[\(](19\d{2}|20\d{2})[\]\)]", string.Empty).Trim();
        Log.Debug("{0} TMDB YEAR: Found {1}, New Search string: {2}", strGrabber, year, searchStr);
      }
      else
      {
        year = 0;
      }
    }
    string sRequest = MakeTMDBUrl(API_SearchMovie, string.Empty, searchStr/*, year*/);

    string json = GetWebServerResponse(sRequest);
    // Log.Debug("{0} GetTitles({1}) TMDB Response = {2}", strGrabber, title, json);

    if (!string.IsNullOrEmpty(json))
    {
      SearchResult Movies = JsonConvert.DeserializeObject<SearchResult>(json);
      if (Movies != null && Movies.movies != null && Movies.movies.Count > 0)
      {
        foreach (SearchTitles tmdbMovie in Movies.movies)
        {
          if (tmdbMovie.id > 0)
          {
            // Year
            string sYear = !string.IsNullOrWhiteSpace(tmdbMovie.release_date) && tmdbMovie.release_date.Length >= 4 ? tmdbMovie.release_date.Substring(0, 4) : string.Empty;

            // Title - TITLE_SEARCH_MASK {0} - Title {1} - Separator {2} - Original Title {3} - Year
            string sTitle = TITLE_SEARCH_MASK;
            if (!string.IsNullOrEmpty(sTitle))
            {
              if (tmdbMovie.title.Equals(tmdbMovie.original_title, StringComparison.CurrentCultureIgnoreCase))
              {
                sTitle = sTitle.Replace("{1}", string.Empty).Replace("{2}", string.Empty).Trim();
              }
              if (string.IsNullOrEmpty(tmdbMovie.title) || string.IsNullOrEmpty(tmdbMovie.original_title))
              {
                sTitle = sTitle.Replace("{1}", string.Empty).Trim();
              }
              sTitle = string.Format(sTitle, tmdbMovie.title, TITLE_SEPARATOR, tmdbMovie.original_title, sYear);
              /*
              if (!string.IsNullOrEmpty(sTitle))
              {
                sTitle = sTitle.Trim();
                if (!string.IsNullOrEmpty(sYear))
                {
                  sTitle = sTitle + " (" + sYear + ")";
                }
              }
              */
            }

            // Check for Year
            bool skip = false;
            if (year != 0 && !string.IsNullOrEmpty(sYear))
            {
              int iFoundYear = 0;
              if (!Int32.TryParse(sYear, out iFoundYear))
              {
                skip = true;
              }

              if (!skip)
              {
                if (year != iFoundYear && (year - GRABBER_ACC_YEAR) != iFoundYear && (year + GRABBER_ACC_YEAR) != iFoundYear)
                {
                  skip = true;
                }
              }
            }
            if (skip)
            {
              Log.Debug("{0} TMDB Skip due Year {1}: {2} - {3}", strGrabber, year, tmdbMovie.id, sTitle);
              continue;
            }

            // Add to Result list
            Log.Info("{0} TMDB Found: [{1}] {2}", strGrabber, tmdbMovie.id, sTitle);
            GrabberUrl aUrl = new GrabberUrl(tmdbMovie.id.ToString(), sTitle, "TMDB_" + API_LANG);
            tReturn.Add(aUrl);
          }
        }
      }
    }
    Log.Debug("{0} TMDB Search for {1} ended.", strGrabber, title);
    return tReturn.ToArray();
  }

  public static GrabberMovie GetTMDBDetails(string url)
  {
    GrabberMovie oReturn = new GrabberMovie();
    string json = string.Empty;
    if (string.IsNullOrEmpty(url))
    {
      return oReturn;
    }

    try
    {
      string sRequest = GetTMDBMovieDetailsURL(url);
      if (!url.Contains(API_KEY))
      {
        sRequest = GetTMDBMovieDetailsURL(url);
      }
      json = GetWebServerResponse(sRequest);
    }
    catch
    {
      return oReturn;
    }
    if (string.IsNullOrEmpty(json))
    {
      return oReturn;
    }

    // Log.Debug("{0} GetTMDBDetails url = {1}, sResponseDetails = {2}", strGrabber, HideAPIKey(url), json);
    try
    {
      MovieDetails Movie = JsonConvert.DeserializeObject<MovieDetails>(json);
      if (Movie == null || Movie.id <= 0)
      {
        return oReturn;
      }

      oReturn.ID = Movie.id;
      oReturn.Title = Movie.title;
      oReturn.OriginalTitle = Movie.original_title;
      oReturn.IMDBNumber = Movie.imdb_id;
      oReturn.Plot = Movie.overview;
      oReturn.TagLine = Movie.tagline;
      oReturn.RunTime = Movie.runtime;
      oReturn.Rating = (float)Movie.vote_average;
      oReturn.Votes = Movie.vote_count;

      oReturn.Genre = string.Empty;
      if (Movie.genres != null && Movie.genres.Count > 0)
      {
        foreach (Genre genre in Movie.genres)
        {
          oReturn.Genre += (!string.IsNullOrEmpty(oReturn.Genre) ? " / " : string.Empty) + genre.name;
        }
      }

      oReturn.Language = string.Empty;
      if (Movie.spoken_languages != null && Movie.spoken_languages.Count > 0)
      {
        foreach (SpokenLanguage language in Movie.spoken_languages)
        {
          oReturn.Language += (!string.IsNullOrEmpty(oReturn.Language) ? ", " : string.Empty) + language.name;
        }
      }
      else
      {
        if (!string.IsNullOrEmpty(Movie.original_language))
        {
          oReturn.Language = Movie.original_language;
        }
      }

      oReturn.Country = string.Empty;
      if (Movie.production_countries != null && Movie.production_countries.Count > 0)
      {
        foreach (ProductionCountry country in Movie.production_countries)
        {
          oReturn.Country += (!string.IsNullOrEmpty(oReturn.Country) ? ", " : string.Empty) + country.name;
        }
      }

      oReturn.Studios = string.Empty;
      if (Movie.production_companies != null && Movie.production_companies.Count > 0)
      {
        foreach (ProductionCompany studio in Movie.production_companies)
        {
          oReturn.Studios += (!string.IsNullOrEmpty(oReturn.Studios) ? " / " : string.Empty) + studio.name;
        }
      }

      string sYear = !string.IsNullOrWhiteSpace(Movie.release_date) && Movie.release_date.Length >= 4 ? Movie.release_date.Substring(0, 4) : string.Empty;
      if (!string.IsNullOrEmpty(sYear))
      {
        int iYear;
        int.TryParse(sYear, out iYear);
        oReturn.Year = iYear;
        Log.Debug("{0} TMDB Year {1}", strGrabber, iYear);
      }

      if (GRABBER_ADDTOUSERGROUP)
      {
        oReturn.UserGroups = (string.IsNullOrEmpty(oReturn.Title) ? GRABBER_OurGroup : GRABBER_ForeignGroup);
      }
      else
      {
        oReturn.UserGroups = string.Empty;
      }

      if (string.IsNullOrEmpty(oReturn.Title))
      {
        oReturn.Title = oReturn.OriginalTitle;
      }

      oReturn.ThumbURL = Movie.poster_path;
      if (!string.IsNullOrEmpty(oReturn.ThumbURL))
      {
        oReturn.ThumbURL = API_PosterUrl + oReturn.ThumbURL;
      }
      else
      {
        oReturn.ThumbURL = string.Empty;
      }

      oReturn.FanartURL = Movie.backdrop_path;
      if (!string.IsNullOrEmpty(oReturn.FanartURL))
      {
        oReturn.FanartURL = API_FanartUrl + oReturn.FanartURL;
      }
      else
      {
        oReturn.FanartURL = string.Empty;
      }

      // Movie Collection
      if (Movie.belongs_to_collection != null)
      {
        oReturn.Collection = Movie.belongs_to_collection.name;
        oReturn.CollectionCover = Movie.belongs_to_collection.poster_path;
        if (!string.IsNullOrEmpty(oReturn.CollectionCover))
        {
          oReturn.CollectionCover = API_PosterUrl + oReturn.CollectionCover;
        }
        else
        {
          oReturn.CollectionCover = string.Empty;
        }
        oReturn.CollectionBackdrop = Movie.belongs_to_collection.backdrop_path;
        if (!string.IsNullOrEmpty(oReturn.CollectionBackdrop))
        {
          oReturn.CollectionBackdrop = API_FanartUrl + oReturn.CollectionBackdrop;
        }
        else
        {
          oReturn.CollectionBackdrop = string.Empty;
        }
      }
      else
      {
        oReturn.Collection = string.Empty;
        oReturn.CollectionCover = string.Empty;
        oReturn.CollectionBackdrop = string.Empty;
      }

      // Make Title by TITLE_MASK {0} - Title {1} - Separator {2} - Original Title
      string ResultTitleMask = TITLE_MASK;
      if (!string.IsNullOrEmpty(ResultTitleMask))
      {
        if (oReturn.Title.Equals(oReturn.OriginalTitle, StringComparison.CurrentCultureIgnoreCase))
        {
          ResultTitleMask = ResultTitleMask.Replace("{1}", string.Empty).Replace("{2}", string.Empty).Trim();
        }
        if (string.IsNullOrEmpty(oReturn.Title) || string.IsNullOrEmpty(oReturn.OriginalTitle))
        {
          ResultTitleMask = ResultTitleMask.Replace("{1}", string.Empty).Trim();
        }

        oReturn.Title = string.Format(ResultTitleMask, oReturn.Title, TITLE_SEPARATOR, oReturn.OriginalTitle);
        if (!string.IsNullOrEmpty(oReturn.Title))
        {
          oReturn.Title = oReturn.Title.Trim();
        }
      }
    }
    catch { }

    return oReturn;
  }

  public static void GetTMDBRelease(ref GrabberMovie movie)
  {
    if (movie.ID == 0)
    {
      return;
    }

    try
    {
      string sRequest = MakeTMDBUrl(API_ReleaseInfo, movie.ID.ToString());
      string json = GetWebServerResponse(sRequest);
      if (string.IsNullOrEmpty(json))
      {
        return;
      }

      SearchRelease releases = JsonConvert.DeserializeObject<SearchRelease>(json);
      if (releases == null || releases.countries == null || releases.countries.Count <= 0)
      {
        return;
      }

      string sCertification = string.Empty;
      // Country country = releases.countries.Where(c => c.iso_3166_1.ToUpperInvariant() == API_LANG).FirstOrDefault();
      sCertification = GetMPAA(releases.countries, API_LANG);
      // if (country != null)
      if (!string.IsNullOrEmpty(sCertification))
      {
        // sCertification = country.certification;
        Log.Debug("{0} TMDB MPAA {1}: {2}", strGrabber, API_LANG, sCertification);
      }
      else
      {
        // country = releases.countries.Where(c => c.iso_3166_1.ToUpperInvariant() == "US").FirstOrDefault();
        sCertification = GetMPAA(releases.countries, "US");
        // if (country != null)
        if (!string.IsNullOrEmpty(sCertification))
        {
          // sCertification = country.certification;
          Log.Debug("{0} TMDB MPAA US: {1}", strGrabber, sCertification);
        }
        else
        {
          // country = releases.countries.Where(c => c.iso_3166_1.ToUpperInvariant() == "UK").FirstOrDefault();
          sCertification = GetMPAA(releases.countries, "UK");
          // if (country != null)
          if (!string.IsNullOrEmpty(sCertification))
          {
            // sCertification = country.certification;
            Log.Debug("{0} TMDB MPAA UK: {1}", strGrabber, sCertification);
          }
        }
      }
      movie.MPAARating = sCertification;
    }
    catch { }
  }

  private static string GetMPAA(List<Country> countrys, string code)
  {
    if (countrys == null || countrys.Count <= 0)
    {
      return string.Empty;
    }
    if (string.IsNullOrEmpty(code))
    {
      return string.Empty;
    }

    foreach (Country country in countrys)
    {
      if (country.iso_3166_1 == code)
      {
        if (!string.IsNullOrEmpty(country.certification))
        {
          return country.certification;
        }
      }
    }
    return string.Empty;
  }

  public static void GetTMDBCast(ref GrabberMovie movie)
  {
    if (movie.ID == 0)
    {
      return;
    }

    Log.Debug("{0} TMDB Get Cast for {1}: {2}", strGrabber, movie.ID, movie.Title);

    string json = string.Empty;
    try
    {
      string sRequest = MakeTMDBUrl(API_Casts, movie.ID.ToString());
      json = GetWebServerResponse(sRequest);

      if (string.IsNullOrEmpty(json))
      {
        return;
      }
    }
    catch
    {
      return;
    }

    SearchCast casts = JsonConvert.DeserializeObject<SearchCast>(json);
    if (casts == null)
    {
      return;
    }

    try
    {
      List<GrabberPerson> tReturn = new List<GrabberPerson>();
      if (casts.cast != null && casts.cast.Count > 0)
      {
        foreach (Cast cast in casts.cast)
        {
          GrabberPerson aPerson = new GrabberPerson();
          aPerson.Id = cast.id.ToString();
          aPerson.Name = cast.name;
          aPerson.As = cast.character;
          tReturn.Add(aPerson);
        }
        movie.Cast = tReturn.ToArray();
      }
    }
    catch { }

    try
    {
      List<GrabberPerson> tReturn = new List<GrabberPerson>();
      if (casts.crew != null && casts.crew.Count > 0)
      {
        foreach (Crew crew in casts.crew)
        {
          GrabberPerson aPerson = new GrabberPerson();
          aPerson.Id = crew.id.ToString();
          aPerson.Name = crew.name;
          aPerson.As = crew.department; // crew.job;
          tReturn.Add(aPerson);
        }
        movie.Crew = tReturn.ToArray();
      }
    }
    catch { }
  }

  // MP1-4761: Movie Collections
  private static void GetTMDCollections(int iCollection)
  {
    if (iCollection <= 0)
    {
      return;
    }

    string sRequest = MakeTMDBUrl(API_Collection, iCollection.ToString().Trim());
    string json = string.Empty;

    try
    {
      json = GetWebServerResponse(sRequest);

      if (string.IsNullOrEmpty(json))
      {
        return;
      }
    }
    catch
    {
      return;
    }

    Log.Debug("{0} TMDB Get Collections ({1}) info.", strGrabber, iCollection);
    try
    {
      Collection collection = JsonConvert.DeserializeObject<Collection>(json);
      if (collection == null)
      {
        return;
      }

      if (!string.IsNullOrEmpty(collection.name) && !string.IsNullOrEmpty(collection.overview))
      {
        int idCollection = VideoDatabase.AddCollection(collection.name);
        VideoDatabase.AddCollectionDescription(collection.name, collection.overview);
        Log.Debug("{0} TMDB Added collection with description: {1}:{2} - {3}", strGrabber, idCollection, collection.name, collection.overview);
      }
    }
    catch { }
  }

  private static string HideAPIKey(string url)
  {
    return url.Replace(API_KEY, "<APIKEY>");
  }

  private static string GetTMDBMovieDetailsURL(string url)
  {
    return MakeTMDBUrl(API_MovieInfo, url);
  }

  private static string MakeTMDBUrl(string url, string what, string query = "", int year = 0)
  {
    string sURL = url.Replace("{0}", what) + "?api_key=" + Grabber.API_KEY;
    if (!string.IsNullOrEmpty(API_LANG_URL))
    {
      sURL += "&language=" + API_LANG_URL;
    }
    if (!string.IsNullOrEmpty(query))
    {
      sURL += "&query='" + query + "'";
    }
    if (year > 0)
    {
      sURL += "&year" + year;
    }
    return sURL;
  }

  #endregion TMDB Methods

  #region IMDB Methods

  public static GrabberUrl[] GetIMDBTitles(string title)
  {
    return null;
  }

  public static void GetIMDBDetails(ref IMDBMovie movieDetails)
  {
    if (string.IsNullOrEmpty(movieDetails.IMDBNumber))
    {
      return;
    }
    // IMDB Fill movieDetails

    // IMDB Trivia / Review 
    if (string.IsNullOrEmpty(movieDetails.UserReview))
    {
      if (GRABBER_ADDTRIVIAASREVIEW)
      {
        movieDetails.UserReview = GetTriviaIMDB(movieDetails.IMDBNumber);
      }
      if (string.IsNullOrEmpty(movieDetails.UserReview))
      {
        movieDetails.UserReview = GetUserReviewIMDB(movieDetails.IMDBNumber);
      }
    }

    // Awards
    if (GRABBER_ADD_IMDBAWARDS || string.IsNullOrEmpty(movieDetails.MovieAwards))
    {
      string imdbAwards = GetAwardsIMDB(movieDetails.IMDBNumber);
      if (GRABBER_ADD_IMDBAWARDS && !string.IsNullOrEmpty(movieDetails.MovieAwards))
      {
        movieDetails.MovieAwards = movieDetails.MovieAwards + "\n\n" + imdbAwards;
      }
      else
      {
        movieDetails.MovieAwards = imdbAwards;
      }
    }

    // IMDB MPAA Rating / Text
    string pageURL = string.Format(IMDB_Parents, movieDetails.IMDBNumber);
    string page = GetWebServerResponse(pageURL);
    if (string.IsNullOrEmpty(movieDetails.MPARating))
    {
      movieDetails.MPARating = GetMPAARating(page);
    }
    movieDetails.MPAAText = (!string.IsNullOrEmpty(movieDetails.MPAAText) ? movieDetails.MPAAText + "\n" : string.Empty) + GetMPAARatingText(page);

    // IMDB Rating / Votes 
    if (movieDetails.Rating == 0.0f || string.IsNullOrEmpty(movieDetails.Votes))
    {
      pageURL = string.Format(IMDB_Ratings, movieDetails.IMDBNumber);
      page = GetWebServerResponse(pageURL);
      movieDetails.Rating = GetRatingIMDB(page);
      movieDetails.Votes = GetVotesIMDB(page);
    }

    // IMDB RunTime / Languages / Studios / TagLine
    if (movieDetails.RunTime == 0 || string.IsNullOrEmpty(movieDetails.Language) || string.IsNullOrEmpty(movieDetails.Studios) || string.IsNullOrEmpty(movieDetails.TagLine))
    {
      pageURL = string.Format(IMDB_BaseUrl, movieDetails.IMDBNumber);
      page = GetWebServerResponse(pageURL);
      if (string.IsNullOrEmpty(movieDetails.Language))
      {
        movieDetails.Language = GetLanguagesIMDB(page);
      }
      if (string.IsNullOrEmpty(movieDetails.Studios))
      {
        movieDetails.Studios = GetStudiosIMDB(page);
      }
      if (string.IsNullOrEmpty(movieDetails.TagLine))
      {
        movieDetails.TagLine = GetTagLineIMDB(page);
      }
      if (movieDetails.RunTime == 0)
      {
        movieDetails.RunTime = GetRuntimeIMDB(page);
      }
    }
  }

  // MP1-4846: Movie Awards 
  private static string GetAwardsIMDB(string IMDBID)
  {
    try
    {
      string _awardsURL = string.Format(IMDB_Awards, IMDBID);
      string _awardsPage = GetWebServerResponse(_awardsURL);
      if (string.IsNullOrEmpty(_awardsPage))
      {
        return string.Empty;
      }

      string _awardsList = string.Empty;

      string rx_awards_mainblock = @"<h3>(?<award>[^<]+?)<a href=..event[^>]+?class=.event_year[^>]+?>(?<awardyear>[^<]+?)<(?<block>[\s\S]+?)<\/table>";
      string rx_awards_listWblock = @"<tr>[\s\S]+?>^(?!Nomin(?:ated|ee))|(W(?:on|inner))<\/b(?<block>[\s\S]+?)<\/tr";
      string rx_awards_listNblock = @"<tr>[\s\S]+?>^(?!W(?:on|inner))|(Nomin(?:ated|ee))<\/b(?<block>[\s\S]+?)<\/tr";
      string rx_awards_line = @"award_category.>(?<award>[^<]+?)<[\s\S]+?award_description.>(?<what>[^<]+?)(?:<br.?\/>)?(?<who><[\s\S]+?)<\/td>";
      _awardsPage = HttpUtility.HtmlDecode(_awardsPage);

      ArrayList awardsList = Parse(_awardsPage, rx_awards_mainblock);
      if (awardsList != null && awardsList.Count > 0)
      {
        for (int i = 0; i < awardsList.Count; i++)
        {
          Hashtable awardMain = (Hashtable)awardsList[i];
          string awardMainName = (string)awardMain["award"] + " " + (string)awardMain["awardyear"];
          string awardMainBlock = (string)awardMain["block"];
          awardMainName = awardMainName.Trim().Replace("\n", string.Empty);
          awardMainName = Utils.stripHTMLtags(awardMainName);

          if (!string.IsNullOrEmpty(awardMainBlock))
          {
            _awardsList = _awardsList + "* " + awardMainName + "\n";
            // Winner
            ArrayList awardsWList = Parse(awardMainBlock, rx_awards_listWblock);
            if (awardsWList != null && awardsWList.Count > 0)
            {
              for (int k = 0; k < awardsWList.Count; k++)
              {
                Hashtable awardWMain = (Hashtable)awardsWList[k];
                string awardWMainBlock = (string)awardWMain["block"];
                if (!string.IsNullOrEmpty(awardWMainBlock))
                {
                  _awardsList = _awardsList + "Won:\n";
                  ArrayList awardsWListLines = Parse(awardWMainBlock, rx_awards_line);
                  if (awardsWListLines != null && awardsWListLines.Count > 0)
                  {
                    for (int j = 0; j < awardsWListLines.Count; j++)
                    {
                      Hashtable awardLine = (Hashtable)awardsWListLines[j];
                      string awardLineName = (string)awardLine["award"];
                      string awardLineWho = (string)awardLine["who"];
                      string awardLineWhat = (string)awardLine["what"];
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        awardLineName = awardLineName.Trim().Replace("\n", string.Empty);
                        awardLineName = Utils.stripHTMLtags(awardLineName);
                        awardLineName = Regex.Replace(awardLineName, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineName = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWho))
                      {
                        awardLineWho = awardLineWho.Trim().Replace("\n", string.Empty).Replace("</a>", ", ");
                        awardLineWho = Utils.stripHTMLtags(awardLineWho);
                        awardLineWho = Regex.Replace(awardLineWho, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWho = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWhat))
                      {
                        awardLineWhat = awardLineWhat.Trim().Replace("\n", string.Empty);
                        awardLineWhat = Utils.stripHTMLtags(awardLineWhat);
                        awardLineWhat = Regex.Replace(awardLineWhat, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWhat = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        _awardsList = _awardsList + "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                        Log.Debug("{4} Award (W): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, strGrabber);
                      }
                    }
                  }
                }
              }
            }
            // Nominate
            ArrayList awardsNList = Parse(awardMainBlock, rx_awards_listNblock);
            if (awardsNList != null && awardsNList.Count > 0)
            {
              for (int k = 0; k < awardsNList.Count; k++)
              {
                Hashtable awardNMain = (Hashtable)awardsNList[k];
                string awardNMainBlock = (string)awardNMain["block"];
                if (!string.IsNullOrEmpty(awardNMainBlock))
                {
                  _awardsList = _awardsList + "Nominated:\n";
                  ArrayList awardsNListLines = Parse(awardNMainBlock, rx_awards_line);
                  if (awardsNListLines != null && awardsNListLines.Count > 0)
                  {
                    for (int j = 0; j < awardsNListLines.Count; j++)
                    {
                      Hashtable awardLine = (Hashtable)awardsNListLines[j];
                      string awardLineName = (string)awardLine["award"];
                      string awardLineWho = (string)awardLine["who"];
                      string awardLineWhat = (string)awardLine["what"];
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        awardLineName = awardLineName.Trim().Replace("\n", string.Empty);
                        awardLineName = Utils.stripHTMLtags(awardLineName);
                        awardLineName = Regex.Replace(awardLineName, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineName = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWho))
                      {
                        awardLineWho = awardLineWho.Trim().Replace("\n", string.Empty).Replace("</a>", ", ");
                        awardLineWho = Utils.stripHTMLtags(awardLineWho);
                        awardLineWho = Regex.Replace(awardLineWho, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWho = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineWhat))
                      {
                        awardLineWhat = awardLineWhat.Trim().Replace("\n", string.Empty);
                        awardLineWhat = Utils.stripHTMLtags(awardLineWhat);
                        awardLineWhat = Regex.Replace(awardLineWhat, @"[ ]{2,}", " ").Trim();
                      }
                      else
                      {
                        awardLineWhat = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(awardLineName))
                      {
                        _awardsList = _awardsList + "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                        Log.Debug("{4} Award (N): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, strGrabber);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      
      if (!string.IsNullOrEmpty(_awardsList))
      {
        return "Awards:\n" + _awardsList;
      }
    }
    catch (Exception ex)
    {
      Log.Error("{0} IMDB Script GetAwards error: {1}", strGrabber, ex.Message);
    }
    return string.Empty;
  }

  private static string GetTriviaIMDB(string IMDBID)
  {
    try
    {
      string _triviaURL = string.Format(IMDB_Trivia, IMDBID);
      string _triviaPage = GetWebServerResponse(_triviaURL);
      if (string.IsNullOrEmpty(_triviaPage))
      {
        return string.Empty;
      }

      string _triviaList = string.Empty;

      _triviaPage = HttpUtility.HtmlDecode(_triviaPage);

      string rx_trivia_line = @"<div class=.sodatext.>(?<trivia>[\s\S]+?)<\/div>";
      ArrayList triviaList = Parse(_triviaPage, rx_trivia_line);
      if (triviaList != null && triviaList.Count > 0)
      {
        for (int i = 0; i < triviaList.Count; i++)
        {
          Hashtable triviaMain = (Hashtable)triviaList[i];
          string triviaLine = (string)triviaMain["trivia"];
          if (!string.IsNullOrEmpty(triviaLine))
          {
            triviaLine = triviaLine.Trim().Replace("\n", string.Empty);
            triviaLine = Utils.stripHTMLtags(triviaLine);
            triviaLine = Regex.Replace(triviaLine, @"[ ]{2,}", " ").Trim();
            _triviaList = _triviaList + "* " + triviaLine + "\n";
          }
        }
      }

      if (!string.IsNullOrEmpty(_triviaList))
      {
        return _triviaList;
      }
    }
    catch (Exception ex)
    {
      Log.Error("{0} IMDB Script GetTrivia error: {1}", strGrabber, ex.Message);
    }
    return string.Empty;
  }

  private static string GetUserReviewIMDB(string IMDBID)
  {
    try
    {
      string _reviewURL = string.Format(IMDB_Review, IMDBID);
      string _reviewPage = GetWebServerResponse(_reviewURL);
      if (string.IsNullOrEmpty(_reviewPage))
      {
        return string.Empty;
      }

      string _reviewList = string.Empty;

      _reviewPage = HttpUtility.HtmlDecode(_reviewPage);

      string rx_review_line = @"<span>(?<rating>\d{1,2})<\/span>[^\/]+?\/(?<maxrating>\d{1,2})<\/span>[\s\S]+?<div[^>]+?title.>(?<title>[^<]+?)<\/div>[\s\S]+?<div[^>]+?text.>(?<review>[\s\S]+?)<\/div>";
      ArrayList reviewList = Parse(_reviewPage, rx_review_line);
      if (reviewList != null && reviewList.Count > 0)
      {
        for (int i = 0; i < reviewList.Count; i++)
        {
          Hashtable reviewMain = (Hashtable)reviewList[i];
          string reviewRating = (string)reviewMain["rating"];
          string reviewMaxRating = (string)reviewMain["maxrating"];
          string reviewTitle = (string)reviewMain["title"];
          string reviewText = (string)reviewMain["review"];
          string reviewLine = string.Empty;

          if (!string.IsNullOrEmpty(reviewTitle))
          {
            reviewTitle = reviewTitle.Trim().Replace("\n", string.Empty);
            reviewTitle = Utils.stripHTMLtags(reviewTitle);
            reviewTitle = Regex.Replace(reviewTitle, @"[ ]{2,}", " ").Trim();
          }
          if (!string.IsNullOrEmpty(reviewText))
          {
            reviewText = reviewText.Trim().Replace("\n", string.Empty);
            reviewText = Utils.stripHTMLtags(reviewText);
            reviewText = Regex.Replace(reviewText, @"[ ]{2,}", " ").Trim();
          }
          if (!string.IsNullOrEmpty(reviewText))
          {
            if (!string.IsNullOrEmpty(reviewRating))
            {
              reviewLine = "[" + reviewRating + (!string.IsNullOrEmpty(reviewMaxRating) ? "/" + reviewMaxRating : string.Empty) + "]";
            }
            if (!string.IsNullOrEmpty(reviewTitle))
            {
              reviewLine = reviewLine + " " + reviewTitle + "\n";
            }
            reviewLine = reviewLine + reviewText;
            _reviewList = _reviewList + reviewLine + "\n";
          }
        }
      }

      if (!string.IsNullOrEmpty(_reviewList))
      {
        return _reviewList;
      }
    }
    catch (Exception ex)
    {
      Log.Error("{0} IMDB Script GetUserReview error: {1}", strGrabber, ex.Message);
    }
    return string.Empty;
  }

  private static string GetMPAARating(string IMDBPage)
  {
    string page = IMDBPage;
    if (string.IsNullOrEmpty(page))
    {
      return string.Empty;
    }

    string mpaaRating = string.Empty;

    string regexBlockPattern = @"section id=.certificates.>(?<block>[\s\S]+?)<\/section>";
    string CertBlock = Regex.Match(page, regexBlockPattern).Groups["block"].Value;
    if (!string.IsNullOrEmpty(CertBlock))
    {
      string regexPattern = @"<a href=[^>]+?{0}:.+?>.+?:(?<cert>.+?)<";
      string regexAPIPattern = regexPattern.Replace("{0}", API_LANG);
      mpaaRating = Regex.Match(CertBlock, regexAPIPattern).Groups["cert"].Value;
      if (!string.IsNullOrEmpty(mpaaRating))
      {
        if (API_LANG == "RU")
        {
          mpaaRating = mpaaRating.Replace("+", string.Empty);
        }
        Log.Debug("{0} IMDB MPAA: {1}: {2}", strGrabber, API_LANG, mpaaRating);
      }
      else
      {
        regexAPIPattern = regexPattern.Replace("{0}", "US");
        mpaaRating = Regex.Match(CertBlock, regexAPIPattern).Groups["cert"].Value;
        if (!string.IsNullOrEmpty(mpaaRating))
        {
          Log.Debug("{0} IMDB MPAA: {1}: {2}", strGrabber, "US", mpaaRating);
        }
        else
        {
          regexAPIPattern = regexPattern.Replace("{0}", "GB");
          mpaaRating = Regex.Match(CertBlock, regexAPIPattern).Groups["cert"].Value;
          if (!string.IsNullOrEmpty(mpaaRating))
          {
            Log.Debug("{0} IMDB MPAA: {1}: {2}", strGrabber, "UK", mpaaRating);
          }
        }
      }
    }
    return mpaaRating;
  }

  private static string GetMPAARatingText(string IMDBPage)
  {
    string page = IMDBPage;
    if (string.IsNullOrEmpty(page))
    {
      return string.Empty;
    }

    string mpaaText = string.Empty;

    // MP1-4846: MPAA Text
    string regexPattern = @"mpaa-rating[\s\S]+?MPAA<\/td[^<]+?<td>(?<CertDesc>[^<]+?)<";
    string CertDescription = Regex.Match(page, regexPattern).Groups["CertDesc"].Value;
    if (!string.IsNullOrEmpty(CertDescription))
    {
      mpaaText = CertDescription.Replace("\n", " ");
      Log.Debug("{0} MPAA Description: {1}", strGrabber, CertDescription.Replace("\n", " "));
    }

    // MP1-4846: MPAA Description
    string MPAADesc = string.Empty;
    string rx_mpaa_block = @"section.id=.advisory\-(?!spoiler[s\-])(?<block>[\s\S]+?)<\/section";
    string rx_mpaa_header = @"h4.class=.ipl-list-title.>(?<header>[^<]+?)<\/h4";
    string rx_mpaa_line = @"li.class=.ipl-zebra-list[^>]+?>(?<text>[\s\S]+?)<div class=";

    ArrayList mpaaList = Parse(page, rx_mpaa_block);
    if (mpaaList != null && mpaaList.Count > 0)
    {
      for (int i = 0; i < mpaaList.Count; i++)
      {
        Hashtable mpaaMain = (Hashtable)mpaaList[i];
        string mpaaMainBlock = (string)mpaaMain["block"];
        if (!string.IsNullOrEmpty(mpaaMainBlock))
        {
          string mpaaHeader = Regex.Match(mpaaMainBlock, rx_mpaa_header).Groups["header"].Value;
          ArrayList mpaaLines = Parse(mpaaMainBlock, rx_mpaa_line);
          if (mpaaLines != null && mpaaLines.Count > 0)
          {
            MPAADesc = MPAADesc + "* " + mpaaHeader + "\n";
            for (int j = 0; j < mpaaLines.Count; j++)
            {
              Hashtable mpaaLine = (Hashtable)mpaaLines[j];
              string mpaaLineText = (string)mpaaLine["text"];
              if (!string.IsNullOrEmpty(mpaaLineText) && !Regex.IsMatch(mpaaLineText, @"\d+?\/\d+?"))
              {
                mpaaLineText = mpaaLineText.Trim().Replace("\n", string.Empty);
                mpaaLineText = Utils.stripHTMLtags(mpaaLineText);
                mpaaLineText = mpaaLineText.Trim();
                MPAADesc = MPAADesc + mpaaLineText + "\n";
              }
            }
          }
        }
      }
    }

    if (!string.IsNullOrEmpty(MPAADesc))
    {
      MPAADesc = HttpUtility.HtmlDecode(MPAADesc);
      MPAADesc = Utils.stripHTMLtags(MPAADesc);
      mpaaText = mpaaText + "\n\n" + MPAADesc;
      Log.Debug("{0} MPAA Text: {1}", strGrabber, MPAADesc.Replace("\n", " "));
    }

    return mpaaText;
  }

  private static float GetRatingIMDB(string page)
  {
    string rx_rating = @"vote of.+?(?<rating>\d+?[.,]?\d*?)\s?\/";
    return ParseSingleFloatValue(page, rx_rating, "rating");
  }

  private static string GetVotesIMDB(string page)
  {
    string rx_votes = @"(?<votes>\d{1,}[.,]?(?:\d{1,})?)[\s\S]*?IMDb users";
    string votes = ParseSingleIntValue(page, rx_votes, "votes").ToString();
    return votes.Trim();
  }

  private static string GetLanguagesIMDB(string page)
  {
    if (string.IsNullOrEmpty(page))
    {
      return string.Empty;
    }
    string _languages = string.Empty;

    string rx_block = @"<h4\sclass=.inline.>Language:<\/h4>.*?<\/div>";
    string rx_line = @"href=.[^>]+?language[^>]+?>(?<language>[^<]+)<\/a>";
    string block = Regex.Match(page, rx_block, RegexOptions.Singleline).Value;

    ArrayList languageList = Parse(block, rx_line);
    if (languageList != null && languageList.Count > 0)
    {
      for (int i = 0; i < languageList.Count; i++)
      {
        Hashtable languageMain = (Hashtable)languageList[i];
        string language = (string)languageMain["language"];
        if (!string.IsNullOrEmpty(language))
        {
          language = language.Trim().Replace("\n", string.Empty);
          language = Utils.stripHTMLtags(language);
          language = HttpUtility.HtmlDecode(language);
          language = Regex.Replace(language, @"[ ]{2,}", " ").Replace(", ", " ").Trim();
          _languages = _languages + (string.IsNullOrEmpty(_languages) ? string.Empty : ", ") + language;
        }
      }
    }

    if (!string.IsNullOrEmpty(_languages))
    {
      Log.Debug("{0} IMDB Languages: {1}", strGrabber, _languages);
    }

    return _languages;
  }

  private static string GetStudiosIMDB(string page)
  {
    if (string.IsNullOrEmpty(page))
    {
      return string.Empty;
    }
    string _studios = string.Empty;

    string rx_block = @"<h4\sclass=.inline.>Production\sCo:<\/h4>.*?href=.companycredits";
    string rx_line = @"href=.[^>]+?company[^>]+?>(?:<span[^>]+?>)?(?<movieStudios>[^<]+?)<";
    string block = Regex.Match(page, rx_block, RegexOptions.Singleline).Value;

    ArrayList studioList = Parse(block, rx_line);
    if (studioList != null && studioList.Count > 0)
    {
      for (int i = 0; i < studioList.Count; i++)
      {
        Hashtable studioMain = (Hashtable)studioList[i];
        string studio = (string)studioMain["movieStudios"];
        if (!string.IsNullOrEmpty(studio))
        {
          studio = studio.Trim().Replace("\n", string.Empty);
          studio = Utils.stripHTMLtags(studio);
          studio = HttpUtility.HtmlDecode(studio);
          studio = Regex.Replace(studio, @"[ ]{2,}", " ").Replace(", ", " ").Trim();
          _studios = _studios + (string.IsNullOrEmpty(_studios) ? string.Empty : " / ") + studio;
        }
      }
    }

    if (!string.IsNullOrEmpty(_studios))
    {
      Log.Debug("{0} IMDB Studios: {1}", strGrabber, _studios);
    }

    return _studios;
  }

  private static string GetTagLineIMDB(string page)
  {
    string rx_line = @"Taglines:<\/h4>(?<tagline>[^<]+?)<";
    string _tagline = ParseSingleValue(page, rx_line, "tagline", true);

    if (!string.IsNullOrEmpty(_tagline))
    {
      _tagline = _tagline.Trim().Replace("\n", string.Empty);
      _tagline = HttpUtility.HtmlDecode(_tagline.Trim());
      Log.Debug("{0} IMDB Tagline: {1}", strGrabber, _tagline);
    }
    return _tagline;
  }

  private static int GetRuntimeIMDB(string page)
  {
    string rx_pattern = @"<time itemprop=.duration[^>]*?>\n?.*?(?<runtime>\d+).*min\n?<\/time>";
    return ParseSingleIntValue(page, rx_pattern, "runtime");
  }

  #endregion IMDB Methods

  #region Kinopoisk Methods

  private static string MakeKinopoiskUrl(string method, string query)
  {
    return method + Uri.EscapeDataString(query);
  }

  public static GrabberUrl[] GetKinopoiskTitles(string title, int iLimit)
  {
    Log.Debug("{0} Kinopoisk Search movie {1} started...", strGrabber, title);
    List<GrabberUrl> tReturn = new List<GrabberUrl>();

    string searchStr = API_LANG == "RU" ? title.Replace("Ё", "Е").Replace("ё", "е") : title;
    string imdbMovieID = string.Empty;
    string tmdbMovieID = string.Empty;
    string kinopoiskID = string.Empty;
    string titleMovie = string.Empty;
    string yearMovie = string.Empty;

    if (GRABBER_ID_LOOKUP)
    {
      // Get IMDB ID from search string
      // Regex rximdbid = new Regex(@"(?:\s|\+|^)(?<imdbid>tt\d{7})\b");
      // Match matchimdbid = rximdbid.Match(searchStr);
      // if (matchimdbid.Success)
      string rx_pattern = @"(?:\s|\+|^)(?<imdbid>tt\d{7})\b";
      imdbMovieID = ParseSingleValue(searchStr, rx_pattern, "imdbid", true);
      if (!string.IsNullOrEmpty(imdbMovieID))
      {
        // Get IMDBID
        // imdbMovieID = matchimdbid.Groups["imdbid"].Value;
        Log.Debug("{0} Kinopoisk IMDBID: Found {1}", strGrabber, imdbMovieID);
      }
      // Get TMDB ID from search string
      // rximdbid = new Regex(@"-[\s\+]TMDB(?<tmdbid>\d{1,})\b");
      // matchimdbid = rximdbid.Match(searchStr);
      // if (matchimdbid.Success)
      rx_pattern = @"-[\s\+]TMDB(?<tmdbid>\d{1,})\b";
      tmdbMovieID = ParseSingleValue(searchStr, rx_pattern, "tmdbid", true);
      if (!string.IsNullOrEmpty(tmdbMovieID))
      {
        // Get TMDB
        // tmdbMovieID = matchimdbid.Groups["tmdbid"].Value;
        Log.Debug("{0} Kinopoisk TMDBID: Found {0}", strGrabber, tmdbMovieID);
      }
      // Get Kinopoisk ID from search string
      // rximdbid = new Regex(@"-[\s\+]KP(?<kpid>\d{3,})\b");
      // matchimdbid = rximdbid.Match(searchStr);
      // if (matchimdbid.Success)
      rx_pattern = @"-[\s\+]KP(?<kpid>\d{3,})\b";
      kinopoiskID = ParseSingleValue(searchStr, rx_pattern, "kpid", true);
      if (!string.IsNullOrEmpty(kinopoiskID))
      {
        // kinopoiskID = matchimdbid.Groups["kpid"].Value;
        Log.Debug("{0} Kinopoisk ID: Found {1}", strGrabber, kinopoiskID);
      }
    }

    bool imdbIDFound = false;
    if (!string.IsNullOrWhiteSpace(imdbMovieID) || !string.IsNullOrWhiteSpace(tmdbMovieID))
    {
      try
      {
        // Search IMDBId on TMDB
        string urlID = !string.IsNullOrWhiteSpace(tmdbMovieID) ? tmdbMovieID : imdbMovieID;
        GrabberMovie aMovie = GetTMDBDetails(urlID);
        if (aMovie.ID > 0)
        {
          titleMovie = aMovie.Title;
          yearMovie = aMovie.Year.ToString();
          tmdbMovieID = aMovie.ID.ToString();
          imdbMovieID = aMovie.IMDBNumber;

          if (!string.IsNullOrEmpty(imdbMovieID) && !string.IsNullOrEmpty(titleMovie) && !string.IsNullOrEmpty(yearMovie))
          {
            Log.Debug("{0} Kinopoisk TMDB: {1}: {2} ({3})", strGrabber, imdbMovieID, titleMovie, yearMovie);
            searchStr = titleMovie + " (" + yearMovie + ")";
            imdbIDFound = true;
          }
        }

        // Search IMDBId on IMDB
        if (!imdbIDFound && !string.IsNullOrEmpty(imdbMovieID))
        {
          string pageURL = string.Format(IMDB_BaseMobUrl, imdbMovieID);
          string page = GetWebServerResponse(pageURL);

          string pattern = @"media-body[^<]+?<h1>(?<Title>[^<]+?)<(?:[^\(]+?\((?<Year>\d{4})\)?[^<]+?<[^<]+?<)?\/h1>";
          if (!string.IsNullOrEmpty(page)) 
          {
            titleMovie = ParseSingleValue(page, pattern, "Title", true);
            yearMovie = ParseSingleValue(page, pattern, "Year", true);
            if (!string.IsNullOrEmpty(titleMovie) && !string.IsNullOrEmpty(yearMovie)) 
            {
              Log.Debug("{0} Kinopoisk IMDB: {1}: {2} ({3})", strGrabber, imdbMovieID, titleMovie, yearMovie);
              searchStr = titleMovie + " (" + yearMovie + ")";
              imdbIDFound = true;
            }
          }
        }
      }
      catch { }
    }

    int year = 0;
    // Get Year from search string
    string rx_year = @"^(.*)?[\[\(](?<year>19\d{2}|20\d{2})[\]\)]";
    string s_year = ParseSingleValue(searchStr, rx_year, "year", true);
    if (!string.IsNullOrEmpty(s_year))
    {
      if (Int32.TryParse(s_year, out year))
      {
        searchStr = Regex.Replace(searchStr, @"\+?[\[\(](19\d{2}|20\d{2})[\]\)]", string.Empty).Trim();
        Log.Debug("{0} Kinopoisk YEAR: Found {1}, New Search string: {2}", strGrabber, year, searchStr);
      }
      else
      {
        year = 0;
      }
    }

    // Get Movie from Kinopoisk
    if (!string.IsNullOrEmpty(kinopoiskID))
    {
      GrabberMovie adetails = GetKinopoiskDetails(kinopoiskID);
      // Add to Result list
      Log.Info("{0} Kinopoisk Found: [{1}] {2}", strGrabber, adetails.ID, adetails.Title);
      AddSearchResult(Translit(adetails.OriginalTitle), adetails.ID.ToString(), adetails.Title, imdbIDFound, imdbMovieID, titleMovie, yearMovie, ref tReturn, adetails.Year);
    }
    else
    {
      // Search Movie on Kinopoisk
      string sRequest = MakeKinopoiskUrl(KP_Search, searchStr);

      string json = GetKinopoiskResponse(sRequest);
      // Log.Debug("{0} GetKinopoiskTitles({1}) Kinopoisk Response = {2}", strGrabber, title, json);

      if (!string.IsNullOrEmpty(json))
      {
        KPMovieSearch Movies = JsonConvert.DeserializeObject<KPMovieSearch>(json);
        if (Movies != null && Movies.Data != null && Movies.Data.SearchFilms != null && Movies.Data.SearchFilms.Count > 0)
        {
          int i = 0;
          foreach (KPSearchFilm kpMovie in Movies.Data.SearchFilms)
          {
            if (kpMovie.Id > 0)
            {
              // Title - TITLE_SEARCH_MASK {0} - Title {1} - Separator {2} - Original Title {3} - Year
              string sTitle = TITLE_SEARCH_MASK;
              if (!string.IsNullOrEmpty(sTitle))
              {
                if (kpMovie.NameRu.Equals(kpMovie.NameEn, StringComparison.CurrentCultureIgnoreCase))
                {
                  sTitle = sTitle.Replace("{1}", string.Empty).Replace("{2}", string.Empty).Trim();
                }
                if (string.IsNullOrEmpty(kpMovie.NameRu) || string.IsNullOrEmpty(kpMovie.NameEn))
                {
                  sTitle = sTitle.Replace("{1}", string.Empty).Trim();
                }
                sTitle = string.Format(sTitle, kpMovie.NameRu, TITLE_SEPARATOR, kpMovie.NameEn, kpMovie.Year);
                /*
                if (!string.IsNullOrEmpty(sTitle))
                {
                  sTitle = sTitle.Trim();
                  if (!string.IsNullOrEmpty(kpMovie.Year))
                  {
                    sTitle = sTitle + " (" + kpMovie.Year + ")";
                  }
                }
                */
              }

              // Check for Year
              bool skip = false;
              if (year != 0 && !string.IsNullOrEmpty(kpMovie.Year))
              {
                int iFoundYear = 0;
                if (!Int32.TryParse(kpMovie.Year, out iFoundYear))
                {
                  skip = true;
                }

                if (!skip)
                {
                  if (year != iFoundYear && (year - GRABBER_ACC_YEAR) != iFoundYear && (year + GRABBER_ACC_YEAR) != iFoundYear)
                  {
                    skip = true;
                  }
                }
              }
              if (skip)
              {
                Log.Debug("{0} Kinopoisk: Skip due Year {1}: {2} - {3}", strGrabber, year, kpMovie.Id, sTitle);
                continue;
              }

              int addYear = 0;
              if (year != 0)
              {
                addYear = year;
              }
              else
              {
                int iFoundYear = 0;
                if (Int32.TryParse(kpMovie.Year, out iFoundYear))
                {
                  addYear = iFoundYear;
                }
              }

              // Add to Result list
              Log.Info("{0} Kinopoisk Found: [{1}] {2}", strGrabber, kpMovie.Id, sTitle);
              string searchTitle = Translit((string.IsNullOrEmpty(kpMovie.NameEn) ? kpMovie.NameRu : kpMovie.NameEn));
              AddSearchResult(searchTitle, kpMovie.Id.ToString(), sTitle, imdbIDFound, imdbMovieID, titleMovie, yearMovie, ref tReturn, addYear);

              i++;
              if (i >= iLimit)
              {
                 break;
              }
            }
          }
        }
      }
    }
    Log.Debug("{0} Kinopoisk Search for {1} ended.", strGrabber, title);
    return tReturn.ToArray();
  }

  public static GrabberMovie GetKinopoiskDetails(string url)
  {
    GrabberMovie oReturn = new GrabberMovie();
    if (string.IsNullOrEmpty(url))
    {
      return oReturn;
    }

    string json = string.Empty;
    try
    {
      string sRequest = MakeKinopoiskUrl(KP_Details, url);
      json = GetKinopoiskResponse(sRequest);
    }
    catch
    {
      json = string.Empty;
    }

    if (string.IsNullOrEmpty(json))
    {
      return oReturn;
    }

    // Log.Debug("{0} GetKinopoiskDetails Url = {1}, sResponseDetails = {2}", strGrabber, url, json);
    try
    {
      KPMovieDetails MovieDetails = JsonConvert.DeserializeObject<KPMovieDetails>(json);
      if (MovieDetails == null || MovieDetails.Data == null || MovieDetails.Data.FilmId <= 0)
      {
        return oReturn;
      }

      KPDetailsData Movie = MovieDetails.Data;

      oReturn.ID = Movie.FilmId;
      oReturn.IMDBNumber = string.Empty;
      oReturn.Title = Movie.NameRu;
      oReturn.OriginalTitle = (string.IsNullOrEmpty(Movie.NameEn) ? Movie.NameRu : Movie.NameEn);
      oReturn.Plot = Movie.Description;
      oReturn.TagLine = Movie.Slogan;

      // MPAA Rating
      if (GRABBER_RU_MPAARATING || string.IsNullOrEmpty(Movie.RatingMpaa))
      {
        oReturn.MPAARating = Movie.RatingAgeLimits;
        if (!string.IsNullOrEmpty(Movie.RatingAgeLimits))
        {
          oReturn.MPAAText = string.Format("Зрителям, достигшим {0} лет", Movie.RatingAgeLimits);
        }
      }
      else
      {
        oReturn.MPAARating = Movie.RatingMpaa;
        if (!string.IsNullOrEmpty(Movie.RatingAgeLimits))
        {
          oReturn.MPAAText = string.Format("Зрителям, достигшим {0} лет", Movie.RatingAgeLimits);
        }
      }
      Log.Debug("{0} Kinopoisk MPAA: {1} - {2}", strGrabber, oReturn.MPAARating, oReturn.MPAAText);

      // Runtime
      if (!string.IsNullOrEmpty(Movie.FilmLength))
      {
        if (Movie.FilmLength.IndexOf(":") == -1)
        {
          Movie.FilmLength = "0:0" + Movie.FilmLength;
        }
        TimeSpan runtime;
        if (TimeSpan.TryParse(Movie.FilmLength, out runtime))
        {
          oReturn.RunTime = (int)runtime.TotalMinutes;
          Log.Debug("{0} Kinopoisk Runtime: {1} -> {2}", strGrabber, Movie.FilmLength, oReturn.RunTime);
        }
      }

      // Rating / Votes
      if (GRABBER_RU_RATING)
      {
        Log.Debug("{0} Kinopoisk Rating: {1}", strGrabber, Movie.RatingData.Rating);
        oReturn.Rating = (float)Movie.RatingData.Rating;

        if (!string.IsNullOrEmpty(Movie.RatingData.RatingVoteCount))
        {
          Movie.RatingData.RatingVoteCount = Movie.RatingData.RatingVoteCount.Replace(" ", string.Empty).Trim();
          int iVote;
          if (Int32.TryParse(Movie.RatingData.RatingVoteCount, out iVote))
          {
            oReturn.Votes = iVote;
            Log.Debug("{0} Kinopoisk Votes: {1}", strGrabber, iVote);
          }
        }
      }
      else
      {
        Log.Debug("{0} Kinopoisk IMDB Rating: {1}", strGrabber, Movie.RatingData.RatingIMDB);
        oReturn.Rating = (float)Movie.RatingData.RatingIMDB;

        if (!string.IsNullOrEmpty(Movie.RatingData.RatingIMDBVoteCount))
        {
          Movie.RatingData.RatingIMDBVoteCount = Movie.RatingData.RatingIMDBVoteCount.Replace(" ", string.Empty).Trim();
          int iVote;
          if (Int32.TryParse(Movie.RatingData.RatingIMDBVoteCount, out iVote))
          {
            oReturn.Votes = iVote;
            Log.Debug("{0} Kinopoisk IMDB Votes: {1}", strGrabber, iVote);
          }
        }
      }

      // Genres 
      oReturn.Genre = string.Empty;
      if (!string.IsNullOrEmpty(Movie.Genre))
      {
        oReturn.Genre = Movie.Genre.Replace(", ", " / ");
        Log.Debug("{0} Kinopoisk Genre: {1}", strGrabber, oReturn.Genre);
      }

      // Languages
      oReturn.Language = string.Empty;

      // Countrys
      oReturn.Country = string.Empty;
      if (!string.IsNullOrEmpty(Movie.Country))
      {
          oReturn.Country = Movie.Country;
          Log.Debug("{0} Kinopoisk Country: {1}", strGrabber, oReturn.Country);
      }

      // Studios
      oReturn.Studios = string.Empty;
      if (Movie.RentData != null && !string.IsNullOrEmpty(Movie.RentData.DistributorRelease))
      {
        oReturn.Studios = Movie.RentData.DistributorRelease.Replace(", ", " / ");
        Log.Debug("{0} Kinopoisk Studios: {1}", strGrabber, oReturn.Studios);
      }

      // Year
      if (!string.IsNullOrEmpty(Movie.Year))
      {
        int iYear;
        int.TryParse(Movie.Year, out iYear);
        oReturn.Year = iYear;
        Log.Debug("{0} Kinopoisk Year: {1}", strGrabber, oReturn.Year);
      }

      // Trivia
      oReturn.Trivia = string.Empty;
      if (Movie.TriviaData != null && Movie.TriviaData.Count > 0)
      {
        foreach (string trivia in Movie.TriviaData)
        {
          Log.Debug("{0} Kinopoisk Trivia: {1}", strGrabber, trivia);
          oReturn.Trivia += "* " + trivia + "\n";
        }
      }

      // Awards
      oReturn.Awards = string.Empty;
      if (Movie.HasAwards > 0)
      {
        oReturn.Awards = GetKinopoiskAwards(url);
      }

      // Actors
      GetKinopoiskCast(url, ref oReturn);

      // User groups
      oReturn.UserGroups = string.Empty;
      if (GRABBER_ADDTOUSERGROUP)
      {
        oReturn.UserGroups = (string.IsNullOrEmpty(Movie.NameEn) ? GRABBER_OurGroup : GRABBER_ForeignGroup);
      }

      if (string.IsNullOrEmpty(oReturn.Title))
      {
        oReturn.Title = oReturn.OriginalTitle;
      }

      oReturn.ThumbURL = GetKPImageURL(Movie.BigPosterUrl);
      Log.Debug("{0} Kinopoisk PosterUrl: {1}", strGrabber, oReturn.ThumbURL);

      // Fanart
      oReturn.FanartURL = string.Empty;
      if (Movie.Gallery != null && Movie.Gallery.Count > 0)
      {
        oReturn.FanartURL = GetKPImageURL(Movie.Gallery[0].Preview.Replace("sm_", string.Empty));
        Log.Debug("{0} Kinopoisk FanartURL: {1}", strGrabber, oReturn.FanartURL);
      }

      // Collections
      oReturn.Collection = string.Empty;
      oReturn.CollectionCover = string.Empty;
      oReturn.CollectionBackdrop = string.Empty;

      // Make Title by TITLE_MASK {0} - Title {1} - Separator {2} - Original Title {3} - Year
      string ResultTitleMask = TITLE_MASK;
      if (!string.IsNullOrEmpty(ResultTitleMask))
      {
        if (oReturn.Title.Equals(oReturn.OriginalTitle, StringComparison.CurrentCultureIgnoreCase))
        {
          ResultTitleMask = ResultTitleMask.Replace("{1}", string.Empty).Replace("{2}", string.Empty).Trim();
        }
        if (string.IsNullOrEmpty(oReturn.Title) || string.IsNullOrEmpty(oReturn.OriginalTitle))
        {
          ResultTitleMask = ResultTitleMask.Replace("{1}", string.Empty).Trim();
        }

        oReturn.Title = string.Format(ResultTitleMask, oReturn.Title, TITLE_SEPARATOR, oReturn.OriginalTitle);
        if (!string.IsNullOrEmpty(oReturn.Title))
        {
          oReturn.Title = oReturn.Title.Trim();
        }
      }
    }
    catch // (Exception ex)
    { 
      // Log.Debug("{0} GetKinopoiskDetails {1}", strGrabber, ex);
    }

    return oReturn;
  }

  public static string GetKinopoiskAwards(string url)
  {
    if (string.IsNullOrEmpty(url))
    {
      return string.Empty;
    }

    string json = string.Empty;
    try
    {
      string sRequest = MakeKinopoiskUrl(KP_Awards, url);
      json = GetKinopoiskResponse(sRequest);
    }
    catch
    {
      json = string.Empty;
    }

    if (string.IsNullOrEmpty(json))
    {
      return string.Empty;
    }

    // Log.Debug("{0} GetKinopoiskAwards url = {1}, sResponseDetails = {2}", strGrabber, url, json);
    try
    {
      KPAwardsData AwardsData = JsonConvert.DeserializeObject<KPAwardsData>(json);
      if (AwardsData == null || AwardsData.Data == null || AwardsData.Data.Awards == null || AwardsData.Data.Awards.Count <= 0)
      {
        return string.Empty;
      }
      string _awardsList = string.Empty; 
      foreach (object award in AwardsData.Data.Awards)
      {
        string awardname = string.Empty;
        string awardline = award.ToString();
        string pattern = @"({[^""]+?"")([^""]+?)("":\s\[)";

        Match match = Regex.Match(awardline, pattern, RegexOptions.IgnoreCase);
        if (match.Success)
        {
          awardname = match.Groups[2].Value;
          awardline = Regex.Replace(awardline, pattern, "$1awards$3");

          KPAward kp_award = JsonConvert.DeserializeObject<KPAward>(awardline);
          if (kp_award != null && kp_award.Awards != null && kp_award.Awards.Count > 0)
          {
            string strWon = string.Empty;
            string strNom = string.Empty;

            _awardsList = _awardsList + awardname + "\n"; 

            foreach (KPAwardData awarddata in kp_award.Awards)
            {
              if (awarddata.IsNomination == 0)
              {
                strWon = strWon + "- " + awarddata.Title + (!string.IsNullOrEmpty(awarddata.SubTitle) ? " - " + awarddata.SubTitle : string.Empty) + "\n";
                Log.Debug("{0} Kinopoisk Award (W): {1} - {2} {3}", strGrabber, awardname, awarddata.Title, awarddata.SubTitle);
              }
              else
              {
                strNom = strNom + "- " + awarddata.Title + (!string.IsNullOrEmpty(awarddata.SubTitle) ? " - " + awarddata.SubTitle : string.Empty) + "\n";
                Log.Debug("{0} Kinopoisk Award (N): {1} - {2} {3}", strGrabber, awardname, awarddata.Title, awarddata.SubTitle);
              }
            }

            if (!string.IsNullOrEmpty(strWon))
            {
              _awardsList = _awardsList + "Победитель:\n" + strWon;
            }
            if (!string.IsNullOrEmpty(strNom))
            {
              _awardsList = _awardsList + "Номинации:\n" + strNom;
            }
          }
        }
      }

      if (!string.IsNullOrEmpty(_awardsList))
      {
        return "Награды:\n" + _awardsList;
      }
    }
    catch { }

    return string.Empty;
  }

  public static void GetKinopoiskCast(string url, ref GrabberMovie movie)
  {
    if (string.IsNullOrEmpty(url))
    {
      return;
    }

    string json = string.Empty;
    try
    {
      string sRequest = MakeKinopoiskUrl(KP_Actors, url);
      json = GetKinopoiskResponse(sRequest);
    }
    catch
    {
      json = string.Empty;
    }

    if (string.IsNullOrEmpty(json))
    {
      return;
    }

    // Log.Debug("{0} GetKinopoiskCast url = {1}, sResponseDetails = {2}", strGrabber, url, json);
    try
    {
      if (!string.IsNullOrEmpty(json))
      {
        KPActorsSearch Actors = JsonConvert.DeserializeObject<KPActorsSearch>(json);
        if (Actors != null && Actors.Data != null && Actors.Data.Creators != null && Actors.Data.Creators.Count > 0)
        {
          List<GrabberPerson> tCast = new List<GrabberPerson>();
          List<GrabberPerson> tCrew = new List<GrabberPerson>();
          foreach (List<KPActor> _list in Actors.Data.Creators)
          {
            if (_list != null)
            {
              foreach (KPActor actor in _list)
              {
                GrabberPerson aPerson = new GrabberPerson();
                aPerson.Id = actor.Id.ToString();
                aPerson.Name = (!string.IsNullOrEmpty(actor.NameRU) ? actor.NameRU : actor.NameEN);
                aPerson.As = (actor.ProfessionKey == "actor" ? actor.Description : actor.ProfessionKey);
                if (actor.ProfessionKey == "actor")
                {
                  tCast.Add(aPerson);
                }
                else
                {
                  tCrew.Add(aPerson);
                }
              }
            }
          }
          movie.Cast = tCast.ToArray();
          movie.Crew = tCrew.ToArray();
        }
      }
    }
    catch { }
  }

  #endregion Kinopoisk Methods

  #region Regex Parsers

  private static string ParseSingleValue(string input, string pattern, string name, bool htmlDecode) 
  {
    string result = string.Empty;
      
    ArrayList values = Parse(input, pattern);
    if (values.Count > 0) 
    {
      result = (string)((Hashtable)values[0])[name];
    }
    result = htmlDecode ? HttpUtility.HtmlDecode(result) : result;
    return string.IsNullOrEmpty(result) ? string.Empty : result.Trim();
  }

  private static int ParseSingleIntValue(string input, string pattern, string name) 
  {
    int intValue = 0;
    string value = ParseSingleValue(input, pattern, name, true);

    if (!string.IsNullOrEmpty(value)) 
    {
      value = value.Replace(".", string.Empty);
      value = value.Replace(",", string.Empty);
      if (value.StartsWith("0x") || value.StartsWith("x")) 
      {
        int.TryParse(Regex.Replace(value, @"0?x", string.Empty), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out intValue);
      } 
      else 
      {
        int.TryParse(value, out intValue);
      }
    }
    return intValue;
  }

  private static float ParseSingleFloatValue(string input, string pattern, string name) 
  {
    float floatValue = 0.0F;
    string value = ParseSingleValue(input, pattern, name, true);
    if (!string.IsNullOrEmpty(value)) 
    {
      value = value.Replace(".", CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator);
      value = value.Replace(",", CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator);
      float.TryParse(value, out floatValue);
    }
    return floatValue;
  }

  private static ArrayList Parse(string input, string pattern)
  {
    ArrayList keyedMatches = new ArrayList();
    try
    {
      Regex regEx = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
      MatchCollection matches = regEx.Matches(input);

      // write matches and groups to variables
      foreach (Match currMatch in matches)
      {
        // store the groups in the match
        if (currMatch.Groups.Count > 1)
        {
          Hashtable groupings = new Hashtable();
          for (int i = 1; i < currMatch.Groups.Count; i++)
          {
            groupings.Add(regEx.GroupNameFromNumber(i), currMatch.Groups[i].Value.Trim());
          }
          keyedMatches.Add(groupings);
        }
      }
    }
    catch (Exception e)
    {
      Log.Error("{0}: Regex expression failed! Exception: {1}", strGrabber, e.Message);
      Log.Error(e);
    }
    return keyedMatches;
  }

  #endregion

  #region Web

  private static string GetWebServerResponse(string srequest)
  {
    // Log.Debug("{0} GetWebServerResponse: {1}", strGrabber, HideAPIKey(srequest));
    string sReturn = string.Empty;
    System.Net.HttpWebRequest oHttpWebRequest;
    try
    {
      oHttpWebRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(srequest);
      oHttpWebRequest.Timeout = 5000;
      oHttpWebRequest.Method = System.Net.WebRequestMethods.Http.Get;
      if (srequest.IndexOf(".imdb.") > 0)
      {
        string uu = "BCYmcFe4PTBQ8nEoIcCgT5AJwPk7BAOCg5XsQrvqKyvxEUpEB6KqjE0Uv_pqnPChVCCnD8vgTK3UtK7FGCdw39E2j-Fb5MWegRLgbNA2rFWeYUJbbXhRyUaxqGuuW3AZb1grBhmGMxhDJyH5ntFDj1X1Ejh_jqR6BaQUk6P16AN1EMPstTSBIqxVW08QEqMKQgsK75y8_s1Ss9tyDfZpLZzCWhO5qftGUn3_bbw_DBF6sTZDo6xK-zy88VZ8cws-D30P";
        string id = "BCYobsJMWRwG55i2yGvVuZe7v5twryi7KSxLglDHw2wVcI1rMq0OjHVT7duPo5NNHKDDVFBTVjJM4PoMonlTB_q9NvMCs-wB78Y1hGjdgCLX0SEEC2Y6BD4E3Z6cIoMwlhTDFSprYlxMqjEsFGYwWzVp1oIUYkZQ0kgpX_MvBrEh-fU";
        string cookieHeader = string.Format("uu={0}; id={1}", uu, id);
        oHttpWebRequest.Headers.Add("Cookie", cookieHeader);
        oHttpWebRequest.Headers.Add("Accept-Language", "ru-ru,ru;q=0.8,en-us;q=0.6,en;q=0.4");
      }
      else
      {
        oHttpWebRequest.Accept = "application/json";
      }
      System.Net.HttpWebResponse oResponse = (System.Net.HttpWebResponse)oHttpWebRequest.GetResponse();

      using (System.IO.StreamReader sr = new System.IO.StreamReader(oResponse.GetResponseStream()))
      {
        sReturn = sr.ReadToEnd();
      }
      oResponse.Close();
    }
    catch { }
    finally
    {
      oHttpWebRequest = null;
    }
    return sReturn;
  }

  private static string GetKinopoiskResponse(string url)
  {
    // Log.Debug("{0} GetKinopoiskResponse: {1}", strGrabber, url);

    string plexurl = "http://plex.filmingdata.com/reqh";
    string plexxs = string.Empty;
    string plexxt = string.Empty;

    System.Net.HttpWebRequest webRequest;
    try
    {
      webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(plexurl);
      webRequest.Headers.Clear();
      webRequest.Timeout = 5000;
      webRequest.Method = System.Net.WebRequestMethods.Http.Head;

      webRequest.Headers.Add("Pragma", "no-cache");
      webRequest.Headers.Add("Cache-Control", "no-cache");

      webRequest.Headers.Add("X-Kinopoisk-Url", url);
      webRequest.Headers.Add("X-Server-ID", KP_Plex);
      using (System.Net.WebResponse webResponse = webRequest.GetResponse())
      {
        plexxs = webResponse.Headers["x-signature"];
        plexxt = webResponse.Headers["x-timestamp"];
        webResponse.Close();
      }
    }
    catch
    {
      plexxs = string.Empty;
      plexxt = string.Empty;
    }
    finally
    {
      webRequest = null;
    }
    // Log.Debug("{0} GetKinopoiskResponse: {1} - {2}", strGrabber, plexxs, plexxt);

    if (string.IsNullOrEmpty(plexxs) || string.IsNullOrEmpty(plexxt))
    {
      return string.Empty;
    }

    string sReturn = string.Empty;
    System.Net.HttpWebRequest oHttpWebRequest;
    try
    {
      oHttpWebRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);
      oHttpWebRequest.Headers.Clear();
      oHttpWebRequest.Timeout = 5000;
      oHttpWebRequest.Method = System.Net.WebRequestMethods.Http.Get;

      oHttpWebRequest.Accept = "application/json";
      oHttpWebRequest.UserAgent = KP_Agent;

      oHttpWebRequest.Headers.Add("device", "android");
      oHttpWebRequest.Headers.Add("Android-Api-Version", KP_Android);

      // oHttpWebRequest.Headers.Add("Image-Scale", "1");
      // oHttpWebRequest.Headers.Add("countryID", "2");
      // oHttpWebRequest.Headers.Add("cityID", "1");
      // oHttpWebRequest.Headers.Add("Content-Lang", API_LANG_URL);

      string cd = DateTime.Now.ToString("HH:mm dd.MM.yyyy");
      oHttpWebRequest.Headers.Add("clientDate", cd);

      oHttpWebRequest.Headers.Add("X-SIGNATURE", plexxs);
      oHttpWebRequest.Headers.Add("X-TIMESTAMP", plexxt);

      System.Net.HttpWebResponse oResponse = (System.Net.HttpWebResponse)oHttpWebRequest.GetResponse();

      using (System.IO.StreamReader sr = new System.IO.StreamReader(oResponse.GetResponseStream()))
      {
        sReturn = sr.ReadToEnd();
      }
      oResponse.Close();
    }
    catch (Exception ex)
    {
      Log.Debug("{0} GetKinopoiskResponse: Exception: {1}", strGrabber, ex);
    }
    finally
    {
      oHttpWebRequest = null;
    }
    return sReturn;
  }

  private static string GetKPImageURL(string url)
  {
    if (string.IsNullOrEmpty(url))
    {
      return string.Empty;
    }
    url = KP_ImageUrl + url;

    string resultUrl = string.Empty;
    System.Net.HttpWebRequest webRequest;
    try
    {
      webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);
      webRequest.Headers.Clear();
      webRequest.Timeout = 5000;
      webRequest.Method = System.Net.WebRequestMethods.Http.Head;

      webRequest.Headers.Add("Pragma", "no-cache");
      webRequest.Headers.Add("Cache-Control", "no-cache");

      using (System.Net.WebResponse webResponse = webRequest.GetResponse())
      {
        resultUrl = webResponse.ResponseUri.ToString();
        webResponse.Close();
      }
    }
    catch 
    { 
      resultUrl = string.Empty;
    }
    finally
    {
      webRequest = null;
    }

    if (!string.IsNullOrEmpty(resultUrl))
    {
      if (resultUrl.IndexOf("no-poster") > -1)
      {
        resultUrl = string.Empty;
      }
    }
    return resultUrl;
  }

  #endregion Web

  #region Grabber Struct

  public struct GrabberUrl
  {
    public GrabberUrl(string url, string title, string grabber)
    {
      this.url = url;
      this.title = title;
      this.grabber = grabber;
    }

    public string url;
    public string title;
    public string grabber;
  } // EOC

  public struct GrabberMovie
  {
    /// <summary>
    ///  TITLE
    /// </summary>
    public string Title;

    /// <summary>
    ///  ORIGINAL TITLE
    /// </summary>
    public string OriginalTitle;

    public int ID;

    /// <summary>
    /// IMDB Number
    /// </summary>
    public string IMDBNumber;

    /// <summary>
    /// Production Year
    /// </summary>
    public int Year;

    // Runtime
    public int RunTime;

    // Get covers
    public string ThumbURL;

    // Director
    public string Director;

    // Writers
    public string WritingCredits;

    // Genres
    public string Genre;

    // Studios
    public string Studios;

    // Country
    public string Country;

    // Language
    public string Language;

    // MPAARating NR
    public string MPAARating;

    // MPAARating NR
    public string MPAAText;

    // Tagline
    public string TagLine;

    // Collection
    public string Collection;
    public string CollectionCover;
    public string CollectionBackdrop;

    // User groups
    public string UserGroups;

    // Plot / Plot Outline
    public string Plot;
    public string PlotOutline;

    // Fnart
    public string FanartURL;

    // Rating / Votes
    public float Rating;
    public int Votes;

    // Trivia
    public string Trivia;

    // Awards
    public string Awards;

    /// <summary>
    /// Actors
    /// </summary>
    public GrabberPerson[] Cast;

    /// <summary>
    /// Crews
    /// </summary>
    public GrabberPerson[] Crew;

  } // EOC

  public struct GrabberPerson
  {
    public string Id;
    public string Name;
    public string As;
  } // EOC

  #endregion Grabber Struct

  #region TMDB API Struct

  public class SearchResult
  {
    public int page { get; set; }
    public int total_results { get; set; }
    public int total_pages { get; set; }
    [JsonProperty("results")]
    public List<SearchTitles> movies { get; set; }
  }

  public class SearchRelease
  {
    public int id { get; set; }
    public List<Country> countries { get; set; }
  }

  public class SearchCast
  {
    public int id { get; set; }
    public List<Cast> cast { get; set; }
    public List<Crew> crew { get; set; }
  }

  public class SearchTitles
  {
    public int vote_count { get; set; }
    public int id { get; set; }
    public bool video { get; set; }
    public double vote_average { get; set; }
    public string title { get; set; }
    public double popularity { get; set; }
    public string poster_path { get; set; }
    public string original_language { get; set; }
    public string original_title { get; set; }
    public List<object> genre_ids { get; set; }
    public string backdrop_path { get; set; }
    public bool adult { get; set; }
    public string overview { get; set; }
    public string release_date { get; set; }
  }

  public class MovieDetails
  {
    public bool adult { get; set; }
    public string backdrop_path { get; set; }
    public Collection belongs_to_collection { get; set; }
    public int budget { get; set; }
    public List<Genre> genres { get; set; }
    public string homepage { get; set; }
    public int id { get; set; }
    public string imdb_id { get; set; }
    public string original_language { get; set; }
    public string original_title { get; set; }
    public string overview { get; set; }
    public double popularity { get; set; }
    public string poster_path { get; set; }
    public List<ProductionCompany> production_companies { get; set; }
    public List<ProductionCountry> production_countries { get; set; }
    public string release_date { get; set; }
    public int revenue { get; set; }
    public int runtime { get; set; }
    public List<SpokenLanguage> spoken_languages { get; set; }
    public string status { get; set; }
    public string tagline { get; set; }
    public string title { get; set; }
    public bool video { get; set; }
    public double vote_average { get; set; }
    public int vote_count { get; set; }
  }

  public class Collection
  {
    public int id { get; set; }
    public string name { get; set; }
    public string overview { get; set; }
    public string poster_path { get; set; }
    public string backdrop_path { get; set; }
  }

  public class Genre
  {
    public int id { get; set; }
    public string name { get; set; }
  }

  public class Country
  {
    public string certification { get; set; }
    public string iso_3166_1 { get; set; }
    public bool primary { get; set; }
    public string release_date { get; set; }
  }

  public class ProductionCompany
  {
    public string name { get; set; }
    public int id { get; set; }
  }

  public class ProductionCountry
  {
    public string iso_3166_1 { get; set; }
    public string name { get; set; }
  }

  public class SpokenLanguage
  {
    public string iso_639_1 { get; set; }
    public string name { get; set; }
  }

  public class Cast
  {
    public int cast_id { get; set; }
    public string character { get; set; }
    public string credit_id { get; set; }
    public int gender { get; set; }
    public int id { get; set; }
    public string name { get; set; }
    public int order { get; set; }
    public string profile_path { get; set; }
  }

  public class Crew
  {
    public string credit_id { get; set; }
    public string department { get; set; }
    public int gender { get; set; }
    public int id { get; set; }
    public string job { get; set; }
    public string name { get; set; }
    public string profile_path { get; set; }
  }

  #endregion TMDB API Struct

  #region Kinopoisk API Struct

  public class KPMovieSearch
  {
    [JsonProperty("resultCode")]
    public int ResultCode { get; set; }

    [JsonProperty("message")]
    public string Message { get; set; }

    [JsonProperty("data")]
    public KPSearchData Data { get; set; }

    [JsonProperty("no_cache_flag")]
    public bool NoCacheFlag { get; set; }
  }

  public class KPSearchData
  {
    [JsonProperty("class")]
    public string Class { get; set; }

    [JsonProperty("keyword")]
    public string Keyword { get; set; }

    [JsonProperty("pagesCount")]
    public int PagesCount { get; set; }

    [JsonProperty("searchFilms")]
    public List<KPSearchFilm> SearchFilms { get; set; }

    [JsonProperty("searchFilmsCountResult")]
    public int SearchFilmsCountResult { get; set; }
  }

  public class KPSearchFilm
  {
    [JsonProperty("id")]
    public int Id { get; set; }

    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("nameRU")]
    public string NameRu { get; set; }

    [JsonProperty("nameEN")]
    public string NameEn { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("filmLength")]
    public string FilmLength { get; set; }

    [JsonProperty("year")]
    public string Year { get; set; }

    [JsonProperty("country")]
    public string Country { get; set; }

    [JsonProperty("genre")]
    public string Genre { get; set; }

    [JsonProperty("posterURL")]
    public string PosterUrl { get; set; }

    [JsonProperty("rating")]
    public string Rating { get; set; }

    [JsonProperty("ratingVoteCount")]
    public string RatingVoteCount { get; set; }

    [JsonProperty("videoURL")]
    public KPVideoUrl VideoUrl { get; set; }
  }

  public class KPMovieDetails
  {
    [JsonProperty("resultCode")]
    public int ResultCode { get; set; }

    [JsonProperty("message")]
    public string Message { get; set; }

    [JsonProperty("data")]
    public KPDetailsData Data { get; set; }

    [JsonProperty("no_cache_flag")]
    public bool NoCacheFlag { get; set; }
  }

  public class KPDetailsData
  {
    [JsonProperty("class")]
    public string Class { get; set; }

    [JsonProperty("hasSimilarFilms")]
    public int HasSimilarFilms { get; set; }

    [JsonProperty("reviewsCount")]
    public int ReviewsCount { get; set; }

    [JsonProperty("ratingData")]
    public KPRatingData RatingData { get; set; }

    [JsonProperty("hasSequelsAndPrequelsFilms")]
    public int HasSequelsAndPrequelsFilms { get; set; }

    [JsonProperty("hasRelatedFilms")]
    public int HasRelatedFilms { get; set; }

    [JsonProperty("filmID")]
    public int FilmId { get; set; }

    [JsonProperty("webURL")]
    public string WebUrl { get; set; }

    [JsonProperty("nameRU")]
    public string NameRu { get; set; }

    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("nameEN")]
    public string NameEn { get; set; }

    [JsonProperty("posterURL")]
    public string PosterUrl { get; set; }

    [JsonProperty("posterSize")]
    public KPPosterSize PosterSize { get; set; }

    [JsonProperty("bigPosterURL")]
    public string BigPosterUrl { get; set; }

    [JsonProperty("year")]
    public string Year { get; set; }

    [JsonProperty("filmLength")]
    public string FilmLength { get; set; }

    [JsonProperty("country")]
    public string Country { get; set; }

    [JsonProperty("genre")]
    public string Genre { get; set; }

    [JsonProperty("slogan")]
    public string Slogan { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("videoURL")]
    public KPVideoUrl VideoUrl { get; set; }

    [JsonProperty("ratingMPAA")]
    public string RatingMpaa { get; set; }

    [JsonProperty("ratingAgeLimits")]
    public string RatingAgeLimits { get; set; }

    [JsonProperty("hasAwards")]
    public int HasAwards { get; set; }

    [JsonProperty("rentData")]
    public KPRentData RentData { get; set; }

    [JsonProperty("budgetData")]
    public KPBudgetData BudgetData { get; set; }

    [JsonProperty("gallery")]
    public List<KPGallery> Gallery { get; set; }

    [JsonProperty("creators")]
    public List<List<KPActor>> Creators { get; set; }

    [JsonProperty("topNewsByFilm")]
    public KPTopNewsByFilm TopNewsByFilm { get; set; }

    [JsonProperty("triviaData")]
    public List<string> TriviaData { get; set; }

    [JsonProperty("musicAdvert")]
    public object MusicAdvert { get; set; }

    [JsonProperty("itunes")]
    public KPItunes Itunes { get; set; }
  }

  public class KPBudgetData
  {
    [JsonProperty("grossRU")]
    public string GrossRu { get; set; }

    [JsonProperty("grossUSA")]
    public string GrossUsa { get; set; }

    [JsonProperty("grossWorld")]
    public string GrossWorld { get; set; }

    [JsonProperty("budget")]
    public string Budget { get; set; }

    [JsonProperty("marketing")]
    public string Marketing { get; set; }
  }

  public class KPGallery
  {
    [JsonProperty("preview")]
    public string Preview { get; set; }
  }

  public class KPItunes
  {
    [JsonProperty("resourceId")]
    public int ResourceId { get; set; }

    [JsonProperty("purchaseVariants")]
    public List<string> PurchaseVariants { get; set; }

    [JsonProperty("url")]
    public string Url { get; set; }
  }

  public class KPPosterSize
  {
    [JsonProperty("")]
    public object Empty { get; set; }
  }

  public class KPRatingData
  {
    [JsonProperty("ratingGoodReview")]
    public string RatingGoodReview { get; set; }

    [JsonProperty("ratingGoodReviewVoteCount")]
    public int RatingGoodReviewVoteCount { get; set; }

    [JsonProperty("rating")]
    public double Rating { get; set; }

    [JsonProperty("ratingVoteCount")]
    public string RatingVoteCount { get; set; }

    [JsonProperty("ratingAwait")]
    public string RatingAwait { get; set; }

    [JsonProperty("ratingAwaitCount")]
    public string RatingAwaitCount { get; set; }

    [JsonProperty("ratingIMDb")]
    public double RatingIMDB { get; set; }

    [JsonProperty("ratingIMDbVoteCount")]
    public string RatingIMDBVoteCount { get; set; }

    [JsonProperty("ratingFilmCritics")]
    public string RatingFilmCritics { get; set; }

    [JsonProperty("ratingFilmCriticsVoteCount")]
    public string RatingFilmCriticsVoteCount { get; set; }
  }

  public class KPRentData
  {
    [JsonProperty("premiereRU")]
    public string PremiereRu { get; set; }

    [JsonProperty("Distributors")]
    public string Distributors { get; set; }

    [JsonProperty("premiereWorld")]
    public string PremiereWorld { get; set; }

    [JsonProperty("premiereWorldCountry")]
    public string PremiereWorldCountry { get; set; }

    [JsonProperty("premiereDVD")]
    public string PremiereDvd { get; set; }

    [JsonProperty("premiereBluRay")]
    public string PremiereBluRay { get; set; }

    [JsonProperty("distributorRelease")]
    public string DistributorRelease { get; set; }
  }

  public class KPTopNewsByFilm
  {
    [JsonProperty("ID")]
    public string Id { get; set; }

    [JsonProperty("newsDate")]
    public string NewsDate { get; set; }

    [JsonProperty("newsImagePreviewURL")]
    public string NewsImagePreviewUrl { get; set; }

    [JsonProperty("newsTitle")]
    public string NewsTitle { get; set; }
  }

  public class KPVideoUrl
  {
    [JsonProperty("hd")]
    public string Hd { get; set; }

    [JsonProperty("sd")]
    public string Sd { get; set; }

    [JsonProperty("low")]
    public string Low { get; set; }
  }

  public class KPAwardsData
  {
    [JsonProperty("resultCode")]
    public int ResultCode { get; set; }

    [JsonProperty("message")]
    public string Message { get; set; }

    [JsonProperty("data")]
    public KPAwardsLine Data { get; set; }
  }

  public class KPAwardsLine
  {
    [JsonProperty("class")]
    public string Class { get; set; }

    [JsonProperty("items")]
    public List<object> Awards { get; set; }
  }

  public class KPAward
  {
    [JsonProperty("awards")]
    public List<KPAwardData> Awards { get; set; }
  }

  public class KPAwardData
  {
    [JsonProperty("title")]
    public string Title { get; set; }

    [JsonProperty("image")]
    public string Image { get; set; }

    [JsonProperty("subTitle")]
    public string SubTitle { get; set; }

    [JsonProperty("peopleID")]
    public string PeopleId { get; set; }

    [JsonProperty("isNomination")]
    public int IsNomination { get; set; }
  }

  public class KPActor
  {
    [JsonProperty("id")]
    public int Id { get; set; }

    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("nameRU")]
    public string NameRU { get; set; }

    [JsonProperty("nameEN")]
    public string NameEN { get; set; }

    [JsonProperty("posterURL")]
    public string PosterUrl { get; set; }

    [JsonProperty("professionText")]
    public string ProfessionText { get; set; }

    [JsonProperty("professionKey")]
    public string ProfessionKey { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }
  }

  public class KPActorsData
  {
    [JsonProperty("class")]
    public string Class { get; set; }

    [JsonProperty("creators")]
    public List<List<KPActor>> Creators { get; set; }
  }

  public class KPActorsSearch
  {
    [JsonProperty("resultCode")]
    public int ResultCode { get; set; }

    [JsonProperty("message")]
    public string Message { get; set; }

    [JsonProperty("data")]
    public KPActorsData Data { get; set; }

    [JsonProperty("no_cache_flag")]
    public bool no_cache_flag { get; set; }
  }	

  #endregion Kinopoisk API Struct

  #region Search result

  private static void AddSearchResult(string searchTitle, string MovieID, string movieTitle, bool imdbIDFound, string imdbMovieID, string imdbMovieTitle, string imdbMovieYear, ref List<GrabberUrl> results, int iSearchYear = 0)
  {
    if (results == null)
    {
      return;
    }

    // IMDB already Found, just Add movie to list
    if (imdbIDFound && !string.IsNullOrEmpty(imdbMovieID) && !string.IsNullOrEmpty(imdbMovieTitle) && !string.IsNullOrEmpty(imdbMovieYear))
    {
      Log.Debug("{0} Kinopoisk IMDBID: From Search: {1}", strGrabber, string.Format(TITLE_IMDB_MASK, movieTitle, imdbMovieTitle, imdbMovieYear, imdbMovieID));

      GrabberUrl aUrl = new GrabberUrl(MovieID + imdbMovieID, string.Format(TITLE_IMDB_MASK, movieTitle, imdbMovieTitle, imdbMovieYear, imdbMovieID), "Kinopoisk_" + API_LANG);
      results.Add(aUrl);
      return;
    }

    // IMDBId search Disabled
    if (GRABBER_IMDB_LOOKUP == 0)
    {
      Log.Debug("{0} Kinopoisk IMDBID: Search disabled. Add: {1} - {2}", strGrabber, searchTitle, movieTitle);
      GrabberUrl aUrl = new GrabberUrl(MovieID, movieTitle, "Kinopoisk_" + API_LANG);
      results.Add(aUrl);
      return;
    }

    // Get Year from search string
    if (iSearchYear == 0)
    {
      string rx_year = @"^(.*)?[\[\(](?<year>19\d{2}|20\d{2})[\]\)]";
      string s_year = ParseSingleValue(searchTitle, rx_year, "year", true);
      if (!string.IsNullOrEmpty(s_year))
      {
        int year = 0;
        if (Int32.TryParse(s_year, out year))
        {
          searchTitle = Regex.Replace(searchTitle, @"\+?[\[\(](19\d{2}|20\d{2})[\]\)]", string.Empty).Trim();
          iSearchYear = year;
          Log.Debug("{0} Kinopoisk IMDBID YEAR: Found {1}, New Search string: {2}", strGrabber, iSearchYear, searchTitle);
        }
        else
        {
          iSearchYear = 0;
        }
      }
    }

    int imdbResult = 0;

    string imdbTitle = string.Empty;
    string imdbYear = string.Empty;
    string imdbID = string.Empty;

    // Kinopoisk.ru doesn't provide IMDB_ID. Try to retrieve IMDB_ID from IMDB.com using Alternate Title
    string imdbUrl = string.Format("http://akas.imdb.com/find?s=tt&ttype=ft&q={0}", searchTitle);
    // string imdbUrl = string.Format("https://www.imdb.com/find?s=tt&ttype=ft&q={0}", searchTitle);
    string imdbPage = GetWebServerResponse(imdbUrl);
    if (!string.IsNullOrEmpty(imdbPage))
    {
      // if we got a Details page, this is used
      string rx_imdb_id = @"<link\srel=" + "\"canonical\"" + @"\shref=" + "\"http://www.imdb.com/title/" + @"(?<imdbID>tt\d{7})/" + "\"" + @"\s/>";
      string rx_imdb_title_year = @"og\:title.+?=" + "\"" + @"(?<imdbTitle>.+?)\s\((?<imdbYear>\d{4})\)" + "\"";

      imdbTitle = Utils.stripHTMLtags(ParseSingleValue(imdbPage, rx_imdb_title_year, "imdbTitle", true));
      imdbYear = Utils.stripHTMLtags(ParseSingleValue(imdbPage, rx_imdb_title_year, "imdbYear", true));
      imdbID = ParseSingleValue(imdbPage, rx_imdb_id, "imdbID", true);
      if (!string.IsNullOrEmpty(imdbTitle) && !string.IsNullOrEmpty(imdbYear) && !string.IsNullOrEmpty(imdbID))
      {
        imdbResult++;
        GrabberUrl aUrl = new GrabberUrl(MovieID + imdbID, string.Format(TITLE_IMDB_MASK, movieTitle, imdbTitle, imdbYear, imdbID), "Kinopoisk_" + API_LANG);
        results.Add(aUrl);
        Log.Debug("{0} Kinopoisk IMDB: Details : {1} - {2} -> {3} - {4} ({5})", strGrabber, searchTitle, movieTitle, imdbID, imdbTitle, imdbYear);
      }
      else
      {
        // if we got a Search result page, this is used
        string rx_block = @"<a name=.tt.>[^<]*?<\/a>[^<]*?Titles[^<]*?<\/h\d>[^<]*?<table class=.findList.>(?<block>.+?)<\/table>";
        string block = Regex.Match(imdbPage, rx_block, RegexOptions.Singleline).Value;
        string rx_imdb_search = @"\/title\/(?<imdbID>tt\d{7})[^>]+>(?<imdbTitle>[^<]+)<[^>]+>[^>]+\((?<imdbYear>\d{4})\)(?:.+?aka[^>]+>""?(?<imdbAKA>.+?)""?<\/i)?";
        ArrayList imdbMovies = Parse(block, rx_imdb_search);
        Log.Debug("{0} Kinopoisk IMDB: {1} Count {2} for URL {3}", strGrabber, searchTitle, imdbMovies.Count, imdbUrl);

        int idx = 0;
        for (int i = 0; i < imdbMovies.Count; i++)
        {
          Hashtable imdbMovie = (Hashtable)imdbMovies[i];
          imdbTitle = Utils.stripHTMLtags(HttpUtility.HtmlDecode((string)imdbMovie["imdbTitle"]));
          imdbYear = Utils.stripHTMLtags(HttpUtility.HtmlDecode((string)imdbMovie["imdbYear"]));
          imdbID = (string)imdbMovie["imdbID"];
          
          string imdbAKA = Utils.stripHTMLtags(HttpUtility.HtmlDecode((string)imdbMovie["imdbAKA"]));
          imdbAKA = imdbAKA.Replace("\"", string.Empty).Trim();
          imdbTitle = string.IsNullOrEmpty(imdbAKA) ? imdbTitle : imdbTitle + " aka " + imdbAKA;

          Log.Debug("{0} Kinopoisk IMDB: Search {1} {2}: {3} - {4} {5} ({6})", strGrabber, searchTitle, imdbResult, movieTitle, imdbID, imdbTitle, imdbYear);

          if (!string.IsNullOrEmpty(imdbTitle) && !string.IsNullOrEmpty(imdbYear) && !string.IsNullOrEmpty(imdbID))
          {
            bool skip = false;
            if (iSearchYear != 0)
            {
              int iFoundYear = 0;
              if (!Int32.TryParse(imdbYear, out iFoundYear))
              {
                skip = true;
              }

              if (!skip)
              {
                if (iSearchYear != iFoundYear && (iSearchYear - GRABBER_ACC_YEAR) != iFoundYear && (iSearchYear + GRABBER_ACC_YEAR) != iFoundYear)
                {
                  skip = true;
                }
              }
            }
            if (skip)
            {
              Log.Debug("{0} Kinopoisk IMDB: Skip due Year {1}: {2} - {3} ({4})", strGrabber, iSearchYear, imdbID, imdbTitle, imdbYear);
              continue;
            }

            imdbResult++;
            GrabberUrl aUrl = new GrabberUrl(MovieID + imdbID, string.Format(TITLE_IMDB_MASK, movieTitle, imdbTitle, imdbYear, imdbID), "Kinopoisk_" + API_LANG);
            results.Add(aUrl);

            idx++;
            if (idx == GRABBER_IMDB_LOOKUP)
            {
              break;
            }
          }
        }
      }
    }

    if (imdbResult == 0)
    {
      Log.Debug("{0} Kinopoisk IMDB: {1} Result = {2} - Add: {3}", strGrabber, searchTitle, imdbResult, movieTitle);
      GrabberUrl aUrl = new GrabberUrl(MovieID, movieTitle + " IMDB: Not found.", "Kinopoisk_" + API_LANG);
      results.Add(aUrl);
    }
  }

  #endregion Search result

  #region Encoder

  public static class Encoder
  {
    public static string Encode(string str)
    {
      string charClass = String.Format("0-9a-zA-Z{0}", System.Text.RegularExpressions.Regex.Escape("-_.!~*'()"));
      return System.Text.RegularExpressions.Regex.Replace(str,
          String.Format("[^{0}]", charClass),
          new System.Text.RegularExpressions.MatchEvaluator(EncodeEvaluator));
    }

    public static string EncodeEvaluator(System.Text.RegularExpressions.Match match)
    {
      return (match.Value == " ") ? "+" : String.Format("&{0};", Convert.ToInt32(match.Value[0]));
      //return (match.Value == " ") ? "+" : String.Format("%{0:X2}", Convert.ToInt32(match.Value[0]));
    }
  }

  #endregion Encoder

  #region Translit

  private static string Translit(string strValue)
  {
      return strValue.
// Малые
        Replace("а","a").
        Replace("б","b").
        Replace("в","v").
        Replace("г","g").
        Replace("д","d").
        Replace("е","e").
//               Replace("ё","e").
        Replace("ё","yo").
        Replace("ж","zh").
        Replace("з","z").
        Replace("и","i").
        Replace("й","y").
        Replace("к","k").
        Replace("л","l").
        Replace("м","m").
        Replace("н","n").
        Replace("о","o").
        Replace("п","p").
        Replace("р","r").
        Replace("с","s").
        Replace("т","t").
        Replace("у","u").
        Replace("ф","f").
//               Replace("х","h").
        Replace("х","kh").
        Replace("ц","ts").
        Replace("ч","ch").
        Replace("ш","sh").
        Replace("щ","shch").
        Replace("ь","").
        Replace("ъ","'").
        Replace("ы","y").
        Replace("э","e").
        Replace("ю","yu").
        Replace("я","ya").
// Большие
        Replace("А","A").
        Replace("Б","B").
        Replace("В","V").
        Replace("Г","G").
        Replace("Д","D").
        Replace("Е","E").
//               Replace("Ё","E").
        Replace("Ё","Yo").
        Replace("Ж","Zh").
        Replace("З","Z").
        Replace("И","I").
        Replace("Й","Y").
        Replace("К","K").
        Replace("Л","L").
        Replace("М","M").
        Replace("Н","N").
        Replace("О","O").
        Replace("П","P").
        Replace("Р","R").
        Replace("С","S").
        Replace("Т","T").
        Replace("У","U").
        Replace("Ф","F").
//               Replace("Х","H").
        Replace("Х","Kh").
        Replace("Ц","Ts").
        Replace("Ч","Ch").
        Replace("Ш","Sh"). 
        Replace("Щ","Shch").
        Replace("Ь","").
        Replace("Ъ","'").
        Replace("Ы","Y").
        Replace("Э","E").
        Replace("Ю","Yu").
        Replace("Я","Ya").
// Украинские
        Replace("і","i").
        Replace("ї","i").
        Replace("є","ie").
        Replace("ґ","g'").
        Replace("І","I").
        Replace("Ї","Yi").
        Replace("Є","Ye").
        Replace("Ґ","G'");
  }

  #endregion
}
